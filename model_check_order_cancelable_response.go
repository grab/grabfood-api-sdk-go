// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the CheckOrderCancelableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckOrderCancelableResponse{}

// CheckOrderCancelableResponse 
type CheckOrderCancelableResponse struct {
	// The boolean value to indicate whether an order can be cancelled.
	CancelAble *bool `json:"cancelAble,omitempty"`
	// The reason for the order to be non-cancelable.
	NonCancellationReason *string `json:"nonCancellationReason,omitempty"`
	LimitType *CancelOrderLimitType `json:"limitType,omitempty"`
	// The remaining cancellation quota for the merchant. A value is only returned when the nearest remaining cancellation limit is approaching, else it returns 0.
	LimitTimes *int64 `json:"limitTimes,omitempty"`
	// An array of cancel order reasons JSON objects.
	CancelReasons []CancelReason `json:"cancelReasons,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CheckOrderCancelableResponse CheckOrderCancelableResponse

// NewCheckOrderCancelableResponse instantiates a new CheckOrderCancelableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckOrderCancelableResponse() *CheckOrderCancelableResponse {
	this := CheckOrderCancelableResponse{}
	return &this
}

// NewCheckOrderCancelableResponseWithDefaults instantiates a new CheckOrderCancelableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckOrderCancelableResponseWithDefaults() *CheckOrderCancelableResponse {
	this := CheckOrderCancelableResponse{}
	return &this
}

// GetCancelAble returns the CancelAble field value if set, zero value otherwise.
func (o *CheckOrderCancelableResponse) GetCancelAble() bool {
	if o == nil || IsNil(o.CancelAble) {
		var ret bool
		return ret
	}
	return *o.CancelAble
}

// GetCancelAbleOk returns a tuple with the CancelAble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOrderCancelableResponse) GetCancelAbleOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelAble) {
		return nil, false
	}
	return o.CancelAble, true
}

// HasCancelAble returns a boolean if a field has been set.
func (o *CheckOrderCancelableResponse) HasCancelAble() bool {
	if o != nil && !IsNil(o.CancelAble) {
		return true
	}

	return false
}

// SetCancelAble gets a reference to the given bool and assigns it to the CancelAble field.
func (o *CheckOrderCancelableResponse) SetCancelAble(v bool) {
	o.CancelAble = &v
}

// GetNonCancellationReason returns the NonCancellationReason field value if set, zero value otherwise.
func (o *CheckOrderCancelableResponse) GetNonCancellationReason() string {
	if o == nil || IsNil(o.NonCancellationReason) {
		var ret string
		return ret
	}
	return *o.NonCancellationReason
}

// GetNonCancellationReasonOk returns a tuple with the NonCancellationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOrderCancelableResponse) GetNonCancellationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.NonCancellationReason) {
		return nil, false
	}
	return o.NonCancellationReason, true
}

// HasNonCancellationReason returns a boolean if a field has been set.
func (o *CheckOrderCancelableResponse) HasNonCancellationReason() bool {
	if o != nil && !IsNil(o.NonCancellationReason) {
		return true
	}

	return false
}

// SetNonCancellationReason gets a reference to the given string and assigns it to the NonCancellationReason field.
func (o *CheckOrderCancelableResponse) SetNonCancellationReason(v string) {
	o.NonCancellationReason = &v
}

// GetLimitType returns the LimitType field value if set, zero value otherwise.
func (o *CheckOrderCancelableResponse) GetLimitType() CancelOrderLimitType {
	if o == nil || IsNil(o.LimitType) {
		var ret CancelOrderLimitType
		return ret
	}
	return *o.LimitType
}

// GetLimitTypeOk returns a tuple with the LimitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOrderCancelableResponse) GetLimitTypeOk() (*CancelOrderLimitType, bool) {
	if o == nil || IsNil(o.LimitType) {
		return nil, false
	}
	return o.LimitType, true
}

// HasLimitType returns a boolean if a field has been set.
func (o *CheckOrderCancelableResponse) HasLimitType() bool {
	if o != nil && !IsNil(o.LimitType) {
		return true
	}

	return false
}

// SetLimitType gets a reference to the given CancelOrderLimitType and assigns it to the LimitType field.
func (o *CheckOrderCancelableResponse) SetLimitType(v CancelOrderLimitType) {
	o.LimitType = &v
}

// GetLimitTimes returns the LimitTimes field value if set, zero value otherwise.
func (o *CheckOrderCancelableResponse) GetLimitTimes() int64 {
	if o == nil || IsNil(o.LimitTimes) {
		var ret int64
		return ret
	}
	return *o.LimitTimes
}

// GetLimitTimesOk returns a tuple with the LimitTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOrderCancelableResponse) GetLimitTimesOk() (*int64, bool) {
	if o == nil || IsNil(o.LimitTimes) {
		return nil, false
	}
	return o.LimitTimes, true
}

// HasLimitTimes returns a boolean if a field has been set.
func (o *CheckOrderCancelableResponse) HasLimitTimes() bool {
	if o != nil && !IsNil(o.LimitTimes) {
		return true
	}

	return false
}

// SetLimitTimes gets a reference to the given int64 and assigns it to the LimitTimes field.
func (o *CheckOrderCancelableResponse) SetLimitTimes(v int64) {
	o.LimitTimes = &v
}

// GetCancelReasons returns the CancelReasons field value if set, zero value otherwise.
func (o *CheckOrderCancelableResponse) GetCancelReasons() []CancelReason {
	if o == nil || IsNil(o.CancelReasons) {
		var ret []CancelReason
		return ret
	}
	return o.CancelReasons
}

// GetCancelReasonsOk returns a tuple with the CancelReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOrderCancelableResponse) GetCancelReasonsOk() ([]CancelReason, bool) {
	if o == nil || IsNil(o.CancelReasons) {
		return nil, false
	}
	return o.CancelReasons, true
}

// HasCancelReasons returns a boolean if a field has been set.
func (o *CheckOrderCancelableResponse) HasCancelReasons() bool {
	if o != nil && !IsNil(o.CancelReasons) {
		return true
	}

	return false
}

// SetCancelReasons gets a reference to the given []CancelReason and assigns it to the CancelReasons field.
func (o *CheckOrderCancelableResponse) SetCancelReasons(v []CancelReason) {
	o.CancelReasons = v
}

func (o CheckOrderCancelableResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckOrderCancelableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelAble) {
		toSerialize["cancelAble"] = o.CancelAble
	}
	if !IsNil(o.NonCancellationReason) {
		toSerialize["nonCancellationReason"] = o.NonCancellationReason
	}
	if !IsNil(o.LimitType) {
		toSerialize["limitType"] = o.LimitType
	}
	if !IsNil(o.LimitTimes) {
		toSerialize["limitTimes"] = o.LimitTimes
	}
	if !IsNil(o.CancelReasons) {
		toSerialize["cancelReasons"] = o.CancelReasons
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CheckOrderCancelableResponse) UnmarshalJSON(data []byte) (err error) {
	varCheckOrderCancelableResponse := _CheckOrderCancelableResponse{}

	err = json.Unmarshal(data, &varCheckOrderCancelableResponse)

	if err != nil {
		return err
	}

	*o = CheckOrderCancelableResponse(varCheckOrderCancelableResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cancelAble")
		delete(additionalProperties, "nonCancellationReason")
		delete(additionalProperties, "limitType")
		delete(additionalProperties, "limitTimes")
		delete(additionalProperties, "cancelReasons")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckOrderCancelableResponse struct {
	value *CheckOrderCancelableResponse
	isSet bool
}

func (v NullableCheckOrderCancelableResponse) Get() *CheckOrderCancelableResponse {
	return v.value
}

func (v *NullableCheckOrderCancelableResponse) Set(val *CheckOrderCancelableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckOrderCancelableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckOrderCancelableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckOrderCancelableResponse(val *CheckOrderCancelableResponse) *NullableCheckOrderCancelableResponse {
	return &NullableCheckOrderCancelableResponse{value: val, isSet: true}
}

func (v NullableCheckOrderCancelableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckOrderCancelableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


