// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateDeliveryHourRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDeliveryHourRequest{}

// UpdateDeliveryHourRequest Object contains store delivery hours.
type UpdateDeliveryHourRequest struct {
	OpeningHour StoreHour `json:"openingHour"`
	// To enable force update store delivery hours. Error will be returned if set to false while there is ongoing order.
	Force bool `json:"force"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDeliveryHourRequest UpdateDeliveryHourRequest

// NewUpdateDeliveryHourRequest instantiates a new UpdateDeliveryHourRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDeliveryHourRequest(openingHour StoreHour, force bool) *UpdateDeliveryHourRequest {
	this := UpdateDeliveryHourRequest{}
	this.OpeningHour = openingHour
	this.Force = force
	return &this
}

// NewUpdateDeliveryHourRequestWithDefaults instantiates a new UpdateDeliveryHourRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDeliveryHourRequestWithDefaults() *UpdateDeliveryHourRequest {
	this := UpdateDeliveryHourRequest{}
	return &this
}

// GetOpeningHour returns the OpeningHour field value
func (o *UpdateDeliveryHourRequest) GetOpeningHour() StoreHour {
	if o == nil {
		var ret StoreHour
		return ret
	}

	return o.OpeningHour
}

// GetOpeningHourOk returns a tuple with the OpeningHour field value
// and a boolean to check if the value has been set.
func (o *UpdateDeliveryHourRequest) GetOpeningHourOk() (*StoreHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpeningHour, true
}

// SetOpeningHour sets field value
func (o *UpdateDeliveryHourRequest) SetOpeningHour(v StoreHour) {
	o.OpeningHour = v
}

// GetForce returns the Force field value
func (o *UpdateDeliveryHourRequest) GetForce() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Force
}

// GetForceOk returns a tuple with the Force field value
// and a boolean to check if the value has been set.
func (o *UpdateDeliveryHourRequest) GetForceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Force, true
}

// SetForce sets field value
func (o *UpdateDeliveryHourRequest) SetForce(v bool) {
	o.Force = v
}

func (o UpdateDeliveryHourRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDeliveryHourRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["openingHour"] = o.OpeningHour
	toSerialize["force"] = o.Force

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDeliveryHourRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"openingHour",
		"force",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDeliveryHourRequest := _UpdateDeliveryHourRequest{}

	err = json.Unmarshal(data, &varUpdateDeliveryHourRequest)

	if err != nil {
		return err
	}

	*o = UpdateDeliveryHourRequest(varUpdateDeliveryHourRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "openingHour")
		delete(additionalProperties, "force")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDeliveryHourRequest struct {
	value *UpdateDeliveryHourRequest
	isSet bool
}

func (v NullableUpdateDeliveryHourRequest) Get() *UpdateDeliveryHourRequest {
	return v.value
}

func (v *NullableUpdateDeliveryHourRequest) Set(val *UpdateDeliveryHourRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDeliveryHourRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDeliveryHourRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDeliveryHourRequest(val *UpdateDeliveryHourRequest) *NullableUpdateDeliveryHourRequest {
	return &NullableUpdateDeliveryHourRequest{value: val, isSet: true}
}

func (v NullableUpdateDeliveryHourRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDeliveryHourRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


