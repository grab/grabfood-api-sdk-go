// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the SpecialOpeningHourOpeningHours type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialOpeningHourOpeningHours{}

// SpecialOpeningHourOpeningHours Store special opening hour period.
type SpecialOpeningHourOpeningHours struct {
	// The period type for when the outlet is open.
	OpenPeriodType *string `json:"openPeriodType,omitempty"`
	// An array of open periods. Maximum of 3 periods.
	Periods []OpenPeriod `json:"periods,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpecialOpeningHourOpeningHours SpecialOpeningHourOpeningHours

// NewSpecialOpeningHourOpeningHours instantiates a new SpecialOpeningHourOpeningHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialOpeningHourOpeningHours() *SpecialOpeningHourOpeningHours {
	this := SpecialOpeningHourOpeningHours{}
	return &this
}

// NewSpecialOpeningHourOpeningHoursWithDefaults instantiates a new SpecialOpeningHourOpeningHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialOpeningHourOpeningHoursWithDefaults() *SpecialOpeningHourOpeningHours {
	this := SpecialOpeningHourOpeningHours{}
	return &this
}

// GetOpenPeriodType returns the OpenPeriodType field value if set, zero value otherwise.
func (o *SpecialOpeningHourOpeningHours) GetOpenPeriodType() string {
	if o == nil || IsNil(o.OpenPeriodType) {
		var ret string
		return ret
	}
	return *o.OpenPeriodType
}

// GetOpenPeriodTypeOk returns a tuple with the OpenPeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOpeningHourOpeningHours) GetOpenPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OpenPeriodType) {
		return nil, false
	}
	return o.OpenPeriodType, true
}

// HasOpenPeriodType returns a boolean if a field has been set.
func (o *SpecialOpeningHourOpeningHours) HasOpenPeriodType() bool {
	if o != nil && !IsNil(o.OpenPeriodType) {
		return true
	}

	return false
}

// SetOpenPeriodType gets a reference to the given string and assigns it to the OpenPeriodType field.
func (o *SpecialOpeningHourOpeningHours) SetOpenPeriodType(v string) {
	o.OpenPeriodType = &v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *SpecialOpeningHourOpeningHours) GetPeriods() []OpenPeriod {
	if o == nil || IsNil(o.Periods) {
		var ret []OpenPeriod
		return ret
	}
	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOpeningHourOpeningHours) GetPeriodsOk() ([]OpenPeriod, bool) {
	if o == nil || IsNil(o.Periods) {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *SpecialOpeningHourOpeningHours) HasPeriods() bool {
	if o != nil && !IsNil(o.Periods) {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []OpenPeriod and assigns it to the Periods field.
func (o *SpecialOpeningHourOpeningHours) SetPeriods(v []OpenPeriod) {
	o.Periods = v
}

func (o SpecialOpeningHourOpeningHours) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialOpeningHourOpeningHours) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenPeriodType) {
		toSerialize["openPeriodType"] = o.OpenPeriodType
	}
	if !IsNil(o.Periods) {
		toSerialize["periods"] = o.Periods
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpecialOpeningHourOpeningHours) UnmarshalJSON(data []byte) (err error) {
	varSpecialOpeningHourOpeningHours := _SpecialOpeningHourOpeningHours{}

	err = json.Unmarshal(data, &varSpecialOpeningHourOpeningHours)

	if err != nil {
		return err
	}

	*o = SpecialOpeningHourOpeningHours(varSpecialOpeningHourOpeningHours)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "openPeriodType")
		delete(additionalProperties, "periods")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpecialOpeningHourOpeningHours struct {
	value *SpecialOpeningHourOpeningHours
	isSet bool
}

func (v NullableSpecialOpeningHourOpeningHours) Get() *SpecialOpeningHourOpeningHours {
	return v.value
}

func (v *NullableSpecialOpeningHourOpeningHours) Set(val *SpecialOpeningHourOpeningHours) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialOpeningHourOpeningHours) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialOpeningHourOpeningHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialOpeningHourOpeningHours(val *SpecialOpeningHourOpeningHours) *NullableSpecialOpeningHourOpeningHours {
	return &NullableSpecialOpeningHourOpeningHours{value: val, isSet: true}
}

func (v NullableSpecialOpeningHourOpeningHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialOpeningHourOpeningHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


