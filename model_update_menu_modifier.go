// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateMenuModifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMenuModifier{}

// UpdateMenuModifier Information about the GrabFood client updating their food menu. 
type UpdateMenuModifier struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID string `json:"merchantID"`
	// The record type that you want to update.
	Field string `json:"field"`
	// The record's ID on the partner system. For example, the modifier id in case type is MODIFIER.
	Id string `json:"id"`
	// The record's price in minor unit format.
	Price *int64 `json:"price,omitempty"`
	// **Only required when updating modifiers.** The record's name. Used as identifier to locate the correct record.
	Name string `json:"name"`
	// The record's availableStatus.
	AvailableStatus *string `json:"availableStatus,omitempty"`
	// Allows the modifier's price to be explicitly set as zero. Possible values are as follows:   * `isFree` && `price == 0` sets the modifier's price to zero.   * `isFree` && `price > 0` returns an error message that \"price cannot be set to > 0, if modifier is free”.   * `!isFree` && `price > 0` sets the modifier's price to the defined price.   * `!isFree` && `price == 0` does not update the modifier's price and reuses the existing price. 
	IsFree *bool `json:"isFree,omitempty"`
	// Price configuration (in minor unit) for different service, order type and channel combination. If a service type does not have a specified price, it will utilize the default price of the item. 
	AdvancedPricings []UpdateAdvancedPricing `json:"advancedPricings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateMenuModifier UpdateMenuModifier

// NewUpdateMenuModifier instantiates a new UpdateMenuModifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMenuModifier(merchantID string, field string, id string, name string) *UpdateMenuModifier {
	this := UpdateMenuModifier{}
	this.MerchantID = merchantID
	this.Field = field
	this.Id = id
	this.Name = name
	return &this
}

// NewUpdateMenuModifierWithDefaults instantiates a new UpdateMenuModifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMenuModifierWithDefaults() *UpdateMenuModifier {
	this := UpdateMenuModifier{}
	return &this
}

// GetMerchantID returns the MerchantID field value
func (o *UpdateMenuModifier) GetMerchantID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetMerchantIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantID, true
}

// SetMerchantID sets field value
func (o *UpdateMenuModifier) SetMerchantID(v string) {
	o.MerchantID = v
}

// GetField returns the Field field value
func (o *UpdateMenuModifier) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *UpdateMenuModifier) SetField(v string) {
	o.Field = v
}

// GetId returns the Id field value
func (o *UpdateMenuModifier) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateMenuModifier) SetId(v string) {
	o.Id = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UpdateMenuModifier) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UpdateMenuModifier) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *UpdateMenuModifier) SetPrice(v int64) {
	o.Price = &v
}

// GetName returns the Name field value
func (o *UpdateMenuModifier) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateMenuModifier) SetName(v string) {
	o.Name = v
}

// GetAvailableStatus returns the AvailableStatus field value if set, zero value otherwise.
func (o *UpdateMenuModifier) GetAvailableStatus() string {
	if o == nil || IsNil(o.AvailableStatus) {
		var ret string
		return ret
	}
	return *o.AvailableStatus
}

// GetAvailableStatusOk returns a tuple with the AvailableStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetAvailableStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableStatus) {
		return nil, false
	}
	return o.AvailableStatus, true
}

// HasAvailableStatus returns a boolean if a field has been set.
func (o *UpdateMenuModifier) HasAvailableStatus() bool {
	if o != nil && !IsNil(o.AvailableStatus) {
		return true
	}

	return false
}

// SetAvailableStatus gets a reference to the given string and assigns it to the AvailableStatus field.
func (o *UpdateMenuModifier) SetAvailableStatus(v string) {
	o.AvailableStatus = &v
}

// GetIsFree returns the IsFree field value if set, zero value otherwise.
func (o *UpdateMenuModifier) GetIsFree() bool {
	if o == nil || IsNil(o.IsFree) {
		var ret bool
		return ret
	}
	return *o.IsFree
}

// GetIsFreeOk returns a tuple with the IsFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetIsFreeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFree) {
		return nil, false
	}
	return o.IsFree, true
}

// HasIsFree returns a boolean if a field has been set.
func (o *UpdateMenuModifier) HasIsFree() bool {
	if o != nil && !IsNil(o.IsFree) {
		return true
	}

	return false
}

// SetIsFree gets a reference to the given bool and assigns it to the IsFree field.
func (o *UpdateMenuModifier) SetIsFree(v bool) {
	o.IsFree = &v
}

// GetAdvancedPricings returns the AdvancedPricings field value if set, zero value otherwise.
func (o *UpdateMenuModifier) GetAdvancedPricings() []UpdateAdvancedPricing {
	if o == nil || IsNil(o.AdvancedPricings) {
		var ret []UpdateAdvancedPricing
		return ret
	}
	return o.AdvancedPricings
}

// GetAdvancedPricingsOk returns a tuple with the AdvancedPricings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuModifier) GetAdvancedPricingsOk() ([]UpdateAdvancedPricing, bool) {
	if o == nil || IsNil(o.AdvancedPricings) {
		return nil, false
	}
	return o.AdvancedPricings, true
}

// HasAdvancedPricings returns a boolean if a field has been set.
func (o *UpdateMenuModifier) HasAdvancedPricings() bool {
	if o != nil && !IsNil(o.AdvancedPricings) {
		return true
	}

	return false
}

// SetAdvancedPricings gets a reference to the given []UpdateAdvancedPricing and assigns it to the AdvancedPricings field.
func (o *UpdateMenuModifier) SetAdvancedPricings(v []UpdateAdvancedPricing) {
	o.AdvancedPricings = v
}

func (o UpdateMenuModifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMenuModifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantID"] = o.MerchantID
	toSerialize["field"] = o.Field
	toSerialize["id"] = o.Id
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.AvailableStatus) {
		toSerialize["availableStatus"] = o.AvailableStatus
	}
	if !IsNil(o.IsFree) {
		toSerialize["isFree"] = o.IsFree
	}
	if !IsNil(o.AdvancedPricings) {
		toSerialize["advancedPricings"] = o.AdvancedPricings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateMenuModifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantID",
		"field",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMenuModifier := _UpdateMenuModifier{}

	err = json.Unmarshal(data, &varUpdateMenuModifier)

	if err != nil {
		return err
	}

	*o = UpdateMenuModifier(varUpdateMenuModifier)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "field")
		delete(additionalProperties, "id")
		delete(additionalProperties, "price")
		delete(additionalProperties, "name")
		delete(additionalProperties, "availableStatus")
		delete(additionalProperties, "isFree")
		delete(additionalProperties, "advancedPricings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateMenuModifier struct {
	value *UpdateMenuModifier
	isSet bool
}

func (v NullableUpdateMenuModifier) Get() *UpdateMenuModifier {
	return v.value
}

func (v *NullableUpdateMenuModifier) Set(val *UpdateMenuModifier) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMenuModifier) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMenuModifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMenuModifier(val *UpdateMenuModifier) *NullableUpdateMenuModifier {
	return &NullableUpdateMenuModifier{value: val, isSet: true}
}

func (v NullableUpdateMenuModifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMenuModifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


