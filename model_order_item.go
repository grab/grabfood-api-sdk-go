// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItem{}

// OrderItem struct for OrderItem
type OrderItem struct {
	// The item's ExternalID in the partner system. 
	Id string `json:"id"`
	// The item's ID in Grab system. Partner can use this field in the `EditOrder` endpoint.
	GrabItemID string `json:"grabItemID"`
	// The number of the item ordered.
	Quantity int32 `json:"quantity"`
	// The price (tax-inclusive) in minor format for 1 item and modifiers under it. `Item price(tax inclusive) + Modifier price(tax inclusive) | (2241*1.06)+(165*1.06)=2550`. 
	Price int64 `json:"price"`
	// Tax in minor format for 1 item and all modifiers under it. `0` if tax configuration is absent. `Item tax + Modifier tax | (2241*0.06)+(165*0.06)=144`. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated).
	Tax *int64 `json:"tax,omitempty"`
	// An extra note for the merchant. `Blank` if no note from consumer. 
	Specifications *string `json:"specifications,omitempty"`
	OutOfStockInstruction NullableOutOfStockInstruction `json:"outOfStockInstruction,omitempty"`
	// An array of JSON objects modifiers. Read [this](#categories) for more information.
	Modifiers []OrderItemModifier `json:"modifiers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderItem OrderItem

// NewOrderItem instantiates a new OrderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItem(id string, grabItemID string, quantity int32, price int64) *OrderItem {
	this := OrderItem{}
	this.Id = id
	this.GrabItemID = grabItemID
	this.Quantity = quantity
	this.Price = price
	return &this
}

// NewOrderItemWithDefaults instantiates a new OrderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemWithDefaults() *OrderItem {
	this := OrderItem{}
	return &this
}

// GetId returns the Id field value
func (o *OrderItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrderItem) SetId(v string) {
	o.Id = v
}

// GetGrabItemID returns the GrabItemID field value
func (o *OrderItem) GetGrabItemID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrabItemID
}

// GetGrabItemIDOk returns a tuple with the GrabItemID field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetGrabItemIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrabItemID, true
}

// SetGrabItemID sets field value
func (o *OrderItem) SetGrabItemID(v string) {
	o.GrabItemID = v
}

// GetQuantity returns the Quantity field value
func (o *OrderItem) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *OrderItem) SetQuantity(v int32) {
	o.Quantity = v
}

// GetPrice returns the Price field value
func (o *OrderItem) GetPrice() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *OrderItem) GetPriceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *OrderItem) SetPrice(v int64) {
	o.Price = v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *OrderItem) GetTax() int64 {
	if o == nil || IsNil(o.Tax) {
		var ret int64
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItem) GetTaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *OrderItem) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given int64 and assigns it to the Tax field.
func (o *OrderItem) SetTax(v int64) {
	o.Tax = &v
}

// GetSpecifications returns the Specifications field value if set, zero value otherwise.
func (o *OrderItem) GetSpecifications() string {
	if o == nil || IsNil(o.Specifications) {
		var ret string
		return ret
	}
	return *o.Specifications
}

// GetSpecificationsOk returns a tuple with the Specifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItem) GetSpecificationsOk() (*string, bool) {
	if o == nil || IsNil(o.Specifications) {
		return nil, false
	}
	return o.Specifications, true
}

// HasSpecifications returns a boolean if a field has been set.
func (o *OrderItem) HasSpecifications() bool {
	if o != nil && !IsNil(o.Specifications) {
		return true
	}

	return false
}

// SetSpecifications gets a reference to the given string and assigns it to the Specifications field.
func (o *OrderItem) SetSpecifications(v string) {
	o.Specifications = &v
}

// GetOutOfStockInstruction returns the OutOfStockInstruction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderItem) GetOutOfStockInstruction() OutOfStockInstruction {
	if o == nil || IsNil(o.OutOfStockInstruction.Get()) {
		var ret OutOfStockInstruction
		return ret
	}
	return *o.OutOfStockInstruction.Get()
}

// GetOutOfStockInstructionOk returns a tuple with the OutOfStockInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderItem) GetOutOfStockInstructionOk() (*OutOfStockInstruction, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutOfStockInstruction.Get(), o.OutOfStockInstruction.IsSet()
}

// HasOutOfStockInstruction returns a boolean if a field has been set.
func (o *OrderItem) HasOutOfStockInstruction() bool {
	if o != nil && o.OutOfStockInstruction.IsSet() {
		return true
	}

	return false
}

// SetOutOfStockInstruction gets a reference to the given NullableOutOfStockInstruction and assigns it to the OutOfStockInstruction field.
func (o *OrderItem) SetOutOfStockInstruction(v OutOfStockInstruction) {
	o.OutOfStockInstruction.Set(&v)
}
// SetOutOfStockInstructionNil sets the value for OutOfStockInstruction to be an explicit nil
func (o *OrderItem) SetOutOfStockInstructionNil() {
	o.OutOfStockInstruction.Set(nil)
}

// UnsetOutOfStockInstruction ensures that no value is present for OutOfStockInstruction, not even an explicit nil
func (o *OrderItem) UnsetOutOfStockInstruction() {
	o.OutOfStockInstruction.Unset()
}

// GetModifiers returns the Modifiers field value if set, zero value otherwise.
func (o *OrderItem) GetModifiers() []OrderItemModifier {
	if o == nil || IsNil(o.Modifiers) {
		var ret []OrderItemModifier
		return ret
	}
	return o.Modifiers
}

// GetModifiersOk returns a tuple with the Modifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItem) GetModifiersOk() ([]OrderItemModifier, bool) {
	if o == nil || IsNil(o.Modifiers) {
		return nil, false
	}
	return o.Modifiers, true
}

// HasModifiers returns a boolean if a field has been set.
func (o *OrderItem) HasModifiers() bool {
	if o != nil && !IsNil(o.Modifiers) {
		return true
	}

	return false
}

// SetModifiers gets a reference to the given []OrderItemModifier and assigns it to the Modifiers field.
func (o *OrderItem) SetModifiers(v []OrderItemModifier) {
	o.Modifiers = v
}

func (o OrderItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["grabItemID"] = o.GrabItemID
	toSerialize["quantity"] = o.Quantity
	toSerialize["price"] = o.Price
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.Specifications) {
		toSerialize["specifications"] = o.Specifications
	}
	if o.OutOfStockInstruction.IsSet() {
		toSerialize["outOfStockInstruction"] = o.OutOfStockInstruction.Get()
	}
	if !IsNil(o.Modifiers) {
		toSerialize["modifiers"] = o.Modifiers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"grabItemID",
		"quantity",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderItem := _OrderItem{}

	err = json.Unmarshal(data, &varOrderItem)

	if err != nil {
		return err
	}

	*o = OrderItem(varOrderItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "grabItemID")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "price")
		delete(additionalProperties, "tax")
		delete(additionalProperties, "specifications")
		delete(additionalProperties, "outOfStockInstruction")
		delete(additionalProperties, "modifiers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderItem struct {
	value *OrderItem
	isSet bool
}

func (v NullableOrderItem) Get() *OrderItem {
	return v.value
}

func (v *NullableOrderItem) Set(val *OrderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItem(val *OrderItem) *NullableOrderItem {
	return &NullableOrderItem{value: val, isSet: true}
}

func (v NullableOrderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


