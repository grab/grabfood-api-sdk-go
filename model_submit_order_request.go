// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SubmitOrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitOrderRequest{}

// SubmitOrderRequest A JSON object containing the order information. 
type SubmitOrderRequest struct {
	// The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
	OrderID string `json:"orderID"`
	// The GrabFood short order number. This is unique for each merchant per day. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
	ShortOrderNumber string `json:"shortOrderNumber"`
	// The merchant's ID that is in GrabFood's database.
	MerchantID string `json:"merchantID"`
	// The merchant's ID that is on the partner's database.
	PartnerMerchantID *string `json:"partnerMerchantID,omitempty"`
	// The payment method used. Refer to FAQs for more details about [paymentType](#section/Order/Does-the-paymentType-affect-partners).
	PaymentType string `json:"paymentType"`
	// The boolean value to indicate whether cutlery are needed or not. Refer to FAQs for more details about [cutlery](#section/Order/What-do-the-true-or-false-values-mean-for-cutlery).
	Cutlery bool `json:"cutlery"`
	// The UTC time that a consumer places the order, based on ISO_8601/RFC3339.
	OrderTime string `json:"orderTime"`
	// The order submit time, based on ISO_8601/RFC3339. Only present in the [List Orders](#tag/list-order) response.
	SubmitTime *time.Time `json:"submitTime,omitempty"`
	// The order complete time, based on ISO_8601/RFC3339. Only present in the [List Orders](#tag/list-order) response.
	CompleteTime *time.Time `json:"completeTime,omitempty"`
	// The order scheduled time, based on ISO_8601/RFC3339. Empty for non-scheduled orders.
	ScheduledTime *string `json:"scheduledTime,omitempty"`
	// The state of the order. Only present in the [List Orders](#tag/list-order) response. Refer to [Order States](#section/Order-states).
	OrderState *string `json:"orderState,omitempty"`
	Currency Currency `json:"currency"`
	FeatureFlags OrderFeatureFlags `json:"featureFlags"`
	// The items in an array of JSON Object. Refer to [Items](#items) for more information.
	Items []OrderItem `json:"items"`
	// The campaigns that are applicable for the order.`null` when there is no campaign applied. 
	Campaigns []OrderCampaign `json:"campaigns,omitempty"`
	// An array of promotion objects. Only promotions that are funded by merchants will be sent.
	Promos []OrderPromo `json:"promos,omitempty"`
	Price OrderPrice `json:"price"`
	DineIn *DineIn `json:"dineIn,omitempty"`
	Receiver *Receiver `json:"receiver,omitempty"`
	OrderReadyEstimation *OrderReadyEstimation `json:"orderReadyEstimation,omitempty"`
	// Membership ID for loyalty project. Only present for loyalty program partners.
	MembershipID *string `json:"membershipID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubmitOrderRequest SubmitOrderRequest

// NewSubmitOrderRequest instantiates a new SubmitOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitOrderRequest(orderID string, shortOrderNumber string, merchantID string, paymentType string, cutlery bool, orderTime string, currency Currency, featureFlags OrderFeatureFlags, items []OrderItem, price OrderPrice) *SubmitOrderRequest {
	this := SubmitOrderRequest{}
	this.OrderID = orderID
	this.ShortOrderNumber = shortOrderNumber
	this.MerchantID = merchantID
	this.PaymentType = paymentType
	this.Cutlery = cutlery
	this.OrderTime = orderTime
	this.Currency = currency
	this.FeatureFlags = featureFlags
	this.Items = items
	this.Price = price
	return &this
}

// NewSubmitOrderRequestWithDefaults instantiates a new SubmitOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitOrderRequestWithDefaults() *SubmitOrderRequest {
	this := SubmitOrderRequest{}
	return &this
}

// GetOrderID returns the OrderID field value
func (o *SubmitOrderRequest) GetOrderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetOrderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderID, true
}

// SetOrderID sets field value
func (o *SubmitOrderRequest) SetOrderID(v string) {
	o.OrderID = v
}

// GetShortOrderNumber returns the ShortOrderNumber field value
func (o *SubmitOrderRequest) GetShortOrderNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShortOrderNumber
}

// GetShortOrderNumberOk returns a tuple with the ShortOrderNumber field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetShortOrderNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortOrderNumber, true
}

// SetShortOrderNumber sets field value
func (o *SubmitOrderRequest) SetShortOrderNumber(v string) {
	o.ShortOrderNumber = v
}

// GetMerchantID returns the MerchantID field value
func (o *SubmitOrderRequest) GetMerchantID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetMerchantIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantID, true
}

// SetMerchantID sets field value
func (o *SubmitOrderRequest) SetMerchantID(v string) {
	o.MerchantID = v
}

// GetPartnerMerchantID returns the PartnerMerchantID field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetPartnerMerchantID() string {
	if o == nil || IsNil(o.PartnerMerchantID) {
		var ret string
		return ret
	}
	return *o.PartnerMerchantID
}

// GetPartnerMerchantIDOk returns a tuple with the PartnerMerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetPartnerMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerMerchantID) {
		return nil, false
	}
	return o.PartnerMerchantID, true
}

// HasPartnerMerchantID returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasPartnerMerchantID() bool {
	if o != nil && !IsNil(o.PartnerMerchantID) {
		return true
	}

	return false
}

// SetPartnerMerchantID gets a reference to the given string and assigns it to the PartnerMerchantID field.
func (o *SubmitOrderRequest) SetPartnerMerchantID(v string) {
	o.PartnerMerchantID = &v
}

// GetPaymentType returns the PaymentType field value
func (o *SubmitOrderRequest) GetPaymentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetPaymentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentType, true
}

// SetPaymentType sets field value
func (o *SubmitOrderRequest) SetPaymentType(v string) {
	o.PaymentType = v
}

// GetCutlery returns the Cutlery field value
func (o *SubmitOrderRequest) GetCutlery() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cutlery
}

// GetCutleryOk returns a tuple with the Cutlery field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetCutleryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cutlery, true
}

// SetCutlery sets field value
func (o *SubmitOrderRequest) SetCutlery(v bool) {
	o.Cutlery = v
}

// GetOrderTime returns the OrderTime field value
func (o *SubmitOrderRequest) GetOrderTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderTime
}

// GetOrderTimeOk returns a tuple with the OrderTime field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetOrderTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderTime, true
}

// SetOrderTime sets field value
func (o *SubmitOrderRequest) SetOrderTime(v string) {
	o.OrderTime = v
}

// GetSubmitTime returns the SubmitTime field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetSubmitTime() time.Time {
	if o == nil || IsNil(o.SubmitTime) {
		var ret time.Time
		return ret
	}
	return *o.SubmitTime
}

// GetSubmitTimeOk returns a tuple with the SubmitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetSubmitTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmitTime) {
		return nil, false
	}
	return o.SubmitTime, true
}

// HasSubmitTime returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasSubmitTime() bool {
	if o != nil && !IsNil(o.SubmitTime) {
		return true
	}

	return false
}

// SetSubmitTime gets a reference to the given time.Time and assigns it to the SubmitTime field.
func (o *SubmitOrderRequest) SetSubmitTime(v time.Time) {
	o.SubmitTime = &v
}

// GetCompleteTime returns the CompleteTime field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetCompleteTime() time.Time {
	if o == nil || IsNil(o.CompleteTime) {
		var ret time.Time
		return ret
	}
	return *o.CompleteTime
}

// GetCompleteTimeOk returns a tuple with the CompleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetCompleteTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompleteTime) {
		return nil, false
	}
	return o.CompleteTime, true
}

// HasCompleteTime returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasCompleteTime() bool {
	if o != nil && !IsNil(o.CompleteTime) {
		return true
	}

	return false
}

// SetCompleteTime gets a reference to the given time.Time and assigns it to the CompleteTime field.
func (o *SubmitOrderRequest) SetCompleteTime(v time.Time) {
	o.CompleteTime = &v
}

// GetScheduledTime returns the ScheduledTime field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetScheduledTime() string {
	if o == nil || IsNil(o.ScheduledTime) {
		var ret string
		return ret
	}
	return *o.ScheduledTime
}

// GetScheduledTimeOk returns a tuple with the ScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetScheduledTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledTime) {
		return nil, false
	}
	return o.ScheduledTime, true
}

// HasScheduledTime returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasScheduledTime() bool {
	if o != nil && !IsNil(o.ScheduledTime) {
		return true
	}

	return false
}

// SetScheduledTime gets a reference to the given string and assigns it to the ScheduledTime field.
func (o *SubmitOrderRequest) SetScheduledTime(v string) {
	o.ScheduledTime = &v
}

// GetOrderState returns the OrderState field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetOrderState() string {
	if o == nil || IsNil(o.OrderState) {
		var ret string
		return ret
	}
	return *o.OrderState
}

// GetOrderStateOk returns a tuple with the OrderState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetOrderStateOk() (*string, bool) {
	if o == nil || IsNil(o.OrderState) {
		return nil, false
	}
	return o.OrderState, true
}

// HasOrderState returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasOrderState() bool {
	if o != nil && !IsNil(o.OrderState) {
		return true
	}

	return false
}

// SetOrderState gets a reference to the given string and assigns it to the OrderState field.
func (o *SubmitOrderRequest) SetOrderState(v string) {
	o.OrderState = &v
}

// GetCurrency returns the Currency field value
func (o *SubmitOrderRequest) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SubmitOrderRequest) SetCurrency(v Currency) {
	o.Currency = v
}

// GetFeatureFlags returns the FeatureFlags field value
func (o *SubmitOrderRequest) GetFeatureFlags() OrderFeatureFlags {
	if o == nil {
		var ret OrderFeatureFlags
		return ret
	}

	return o.FeatureFlags
}

// GetFeatureFlagsOk returns a tuple with the FeatureFlags field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetFeatureFlagsOk() (*OrderFeatureFlags, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureFlags, true
}

// SetFeatureFlags sets field value
func (o *SubmitOrderRequest) SetFeatureFlags(v OrderFeatureFlags) {
	o.FeatureFlags = v
}

// GetItems returns the Items field value
func (o *SubmitOrderRequest) GetItems() []OrderItem {
	if o == nil {
		var ret []OrderItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetItemsOk() ([]OrderItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SubmitOrderRequest) SetItems(v []OrderItem) {
	o.Items = v
}

// GetCampaigns returns the Campaigns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmitOrderRequest) GetCampaigns() []OrderCampaign {
	if o == nil {
		var ret []OrderCampaign
		return ret
	}
	return o.Campaigns
}

// GetCampaignsOk returns a tuple with the Campaigns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmitOrderRequest) GetCampaignsOk() ([]OrderCampaign, bool) {
	if o == nil || IsNil(o.Campaigns) {
		return nil, false
	}
	return o.Campaigns, true
}

// HasCampaigns returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasCampaigns() bool {
	if o != nil && !IsNil(o.Campaigns) {
		return true
	}

	return false
}

// SetCampaigns gets a reference to the given []OrderCampaign and assigns it to the Campaigns field.
func (o *SubmitOrderRequest) SetCampaigns(v []OrderCampaign) {
	o.Campaigns = v
}

// GetPromos returns the Promos field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetPromos() []OrderPromo {
	if o == nil || IsNil(o.Promos) {
		var ret []OrderPromo
		return ret
	}
	return o.Promos
}

// GetPromosOk returns a tuple with the Promos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetPromosOk() ([]OrderPromo, bool) {
	if o == nil || IsNil(o.Promos) {
		return nil, false
	}
	return o.Promos, true
}

// HasPromos returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasPromos() bool {
	if o != nil && !IsNil(o.Promos) {
		return true
	}

	return false
}

// SetPromos gets a reference to the given []OrderPromo and assigns it to the Promos field.
func (o *SubmitOrderRequest) SetPromos(v []OrderPromo) {
	o.Promos = v
}

// GetPrice returns the Price field value
func (o *SubmitOrderRequest) GetPrice() OrderPrice {
	if o == nil {
		var ret OrderPrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetPriceOk() (*OrderPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SubmitOrderRequest) SetPrice(v OrderPrice) {
	o.Price = v
}

// GetDineIn returns the DineIn field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetDineIn() DineIn {
	if o == nil || IsNil(o.DineIn) {
		var ret DineIn
		return ret
	}
	return *o.DineIn
}

// GetDineInOk returns a tuple with the DineIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetDineInOk() (*DineIn, bool) {
	if o == nil || IsNil(o.DineIn) {
		return nil, false
	}
	return o.DineIn, true
}

// HasDineIn returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasDineIn() bool {
	if o != nil && !IsNil(o.DineIn) {
		return true
	}

	return false
}

// SetDineIn gets a reference to the given DineIn and assigns it to the DineIn field.
func (o *SubmitOrderRequest) SetDineIn(v DineIn) {
	o.DineIn = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetReceiver() Receiver {
	if o == nil || IsNil(o.Receiver) {
		var ret Receiver
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetReceiverOk() (*Receiver, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given Receiver and assigns it to the Receiver field.
func (o *SubmitOrderRequest) SetReceiver(v Receiver) {
	o.Receiver = &v
}

// GetOrderReadyEstimation returns the OrderReadyEstimation field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetOrderReadyEstimation() OrderReadyEstimation {
	if o == nil || IsNil(o.OrderReadyEstimation) {
		var ret OrderReadyEstimation
		return ret
	}
	return *o.OrderReadyEstimation
}

// GetOrderReadyEstimationOk returns a tuple with the OrderReadyEstimation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetOrderReadyEstimationOk() (*OrderReadyEstimation, bool) {
	if o == nil || IsNil(o.OrderReadyEstimation) {
		return nil, false
	}
	return o.OrderReadyEstimation, true
}

// HasOrderReadyEstimation returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasOrderReadyEstimation() bool {
	if o != nil && !IsNil(o.OrderReadyEstimation) {
		return true
	}

	return false
}

// SetOrderReadyEstimation gets a reference to the given OrderReadyEstimation and assigns it to the OrderReadyEstimation field.
func (o *SubmitOrderRequest) SetOrderReadyEstimation(v OrderReadyEstimation) {
	o.OrderReadyEstimation = &v
}

// GetMembershipID returns the MembershipID field value if set, zero value otherwise.
func (o *SubmitOrderRequest) GetMembershipID() string {
	if o == nil || IsNil(o.MembershipID) {
		var ret string
		return ret
	}
	return *o.MembershipID
}

// GetMembershipIDOk returns a tuple with the MembershipID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderRequest) GetMembershipIDOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipID) {
		return nil, false
	}
	return o.MembershipID, true
}

// HasMembershipID returns a boolean if a field has been set.
func (o *SubmitOrderRequest) HasMembershipID() bool {
	if o != nil && !IsNil(o.MembershipID) {
		return true
	}

	return false
}

// SetMembershipID gets a reference to the given string and assigns it to the MembershipID field.
func (o *SubmitOrderRequest) SetMembershipID(v string) {
	o.MembershipID = &v
}

func (o SubmitOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orderID"] = o.OrderID
	toSerialize["shortOrderNumber"] = o.ShortOrderNumber
	toSerialize["merchantID"] = o.MerchantID
	if !IsNil(o.PartnerMerchantID) {
		toSerialize["partnerMerchantID"] = o.PartnerMerchantID
	}
	toSerialize["paymentType"] = o.PaymentType
	toSerialize["cutlery"] = o.Cutlery
	toSerialize["orderTime"] = o.OrderTime
	if !IsNil(o.SubmitTime) {
		toSerialize["submitTime"] = o.SubmitTime
	}
	if !IsNil(o.CompleteTime) {
		toSerialize["completeTime"] = o.CompleteTime
	}
	if !IsNil(o.ScheduledTime) {
		toSerialize["scheduledTime"] = o.ScheduledTime
	}
	if !IsNil(o.OrderState) {
		toSerialize["orderState"] = o.OrderState
	}
	toSerialize["currency"] = o.Currency
	toSerialize["featureFlags"] = o.FeatureFlags
	toSerialize["items"] = o.Items
	if o.Campaigns != nil {
		toSerialize["campaigns"] = o.Campaigns
	}
	if !IsNil(o.Promos) {
		toSerialize["promos"] = o.Promos
	}
	toSerialize["price"] = o.Price
	if !IsNil(o.DineIn) {
		toSerialize["dineIn"] = o.DineIn
	}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	if !IsNil(o.OrderReadyEstimation) {
		toSerialize["orderReadyEstimation"] = o.OrderReadyEstimation
	}
	if !IsNil(o.MembershipID) {
		toSerialize["membershipID"] = o.MembershipID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubmitOrderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderID",
		"shortOrderNumber",
		"merchantID",
		"paymentType",
		"cutlery",
		"orderTime",
		"currency",
		"featureFlags",
		"items",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitOrderRequest := _SubmitOrderRequest{}

	err = json.Unmarshal(data, &varSubmitOrderRequest)

	if err != nil {
		return err
	}

	*o = SubmitOrderRequest(varSubmitOrderRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "orderID")
		delete(additionalProperties, "shortOrderNumber")
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "partnerMerchantID")
		delete(additionalProperties, "paymentType")
		delete(additionalProperties, "cutlery")
		delete(additionalProperties, "orderTime")
		delete(additionalProperties, "submitTime")
		delete(additionalProperties, "completeTime")
		delete(additionalProperties, "scheduledTime")
		delete(additionalProperties, "orderState")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "featureFlags")
		delete(additionalProperties, "items")
		delete(additionalProperties, "campaigns")
		delete(additionalProperties, "promos")
		delete(additionalProperties, "price")
		delete(additionalProperties, "dineIn")
		delete(additionalProperties, "receiver")
		delete(additionalProperties, "orderReadyEstimation")
		delete(additionalProperties, "membershipID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubmitOrderRequest struct {
	value *SubmitOrderRequest
	isSet bool
}

func (v NullableSubmitOrderRequest) Get() *SubmitOrderRequest {
	return v.value
}

func (v *NullableSubmitOrderRequest) Set(val *SubmitOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitOrderRequest(val *SubmitOrderRequest) *NullableSubmitOrderRequest {
	return &NullableSubmitOrderRequest{value: val, isSet: true}
}

func (v NullableSubmitOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


