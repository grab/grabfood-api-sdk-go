// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the DineIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DineIn{}

// DineIn A JSON object containing order at table information. Present only for dineIn order. **Not available** in [ListOrder](#tag/list-order/operation/list-orders) response.
type DineIn struct {
	// Table number.
	TableID *string `json:"tableID,omitempty"`
	// The number of eaters.
	EaterCount *int64 `json:"eaterCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DineIn DineIn

// NewDineIn instantiates a new DineIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDineIn() *DineIn {
	this := DineIn{}
	return &this
}

// NewDineInWithDefaults instantiates a new DineIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDineInWithDefaults() *DineIn {
	this := DineIn{}
	return &this
}

// GetTableID returns the TableID field value if set, zero value otherwise.
func (o *DineIn) GetTableID() string {
	if o == nil || IsNil(o.TableID) {
		var ret string
		return ret
	}
	return *o.TableID
}

// GetTableIDOk returns a tuple with the TableID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DineIn) GetTableIDOk() (*string, bool) {
	if o == nil || IsNil(o.TableID) {
		return nil, false
	}
	return o.TableID, true
}

// HasTableID returns a boolean if a field has been set.
func (o *DineIn) HasTableID() bool {
	if o != nil && !IsNil(o.TableID) {
		return true
	}

	return false
}

// SetTableID gets a reference to the given string and assigns it to the TableID field.
func (o *DineIn) SetTableID(v string) {
	o.TableID = &v
}

// GetEaterCount returns the EaterCount field value if set, zero value otherwise.
func (o *DineIn) GetEaterCount() int64 {
	if o == nil || IsNil(o.EaterCount) {
		var ret int64
		return ret
	}
	return *o.EaterCount
}

// GetEaterCountOk returns a tuple with the EaterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DineIn) GetEaterCountOk() (*int64, bool) {
	if o == nil || IsNil(o.EaterCount) {
		return nil, false
	}
	return o.EaterCount, true
}

// HasEaterCount returns a boolean if a field has been set.
func (o *DineIn) HasEaterCount() bool {
	if o != nil && !IsNil(o.EaterCount) {
		return true
	}

	return false
}

// SetEaterCount gets a reference to the given int64 and assigns it to the EaterCount field.
func (o *DineIn) SetEaterCount(v int64) {
	o.EaterCount = &v
}

func (o DineIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DineIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableID) {
		toSerialize["tableID"] = o.TableID
	}
	if !IsNil(o.EaterCount) {
		toSerialize["eaterCount"] = o.EaterCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DineIn) UnmarshalJSON(data []byte) (err error) {
	varDineIn := _DineIn{}

	err = json.Unmarshal(data, &varDineIn)

	if err != nil {
		return err
	}

	*o = DineIn(varDineIn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tableID")
		delete(additionalProperties, "eaterCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDineIn struct {
	value *DineIn
	isSet bool
}

func (v NullableDineIn) Get() *DineIn {
	return v.value
}

func (v *NullableDineIn) Set(val *DineIn) {
	v.value = val
	v.isSet = true
}

func (v NullableDineIn) IsSet() bool {
	return v.isSet
}

func (v *NullableDineIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDineIn(val *DineIn) *NullableDineIn {
	return &NullableDineIn{value: val, isSet: true}
}

func (v NullableDineIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDineIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


