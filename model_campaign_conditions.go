// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CampaignConditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignConditions{}

// CampaignConditions The conditions to apply to a campaign.
type CampaignConditions struct {
	// The campaign's start time in UTC format. For example, 2021-09-23T03:30:00Z means 2021-09-23 11:30:00 (UTC +08:00).
	StartTime time.Time `json:"startTime"`
	// The campaign's end time in UTC format.
	EndTime time.Time `json:"endTime"`
	// The type of eater eligible for the campaign.  * `all` - campaign will be applied to everyone. No limitation on campaign type. * `new` - campaign will be applied to consumers who have not ordered from this store in the last three months. Only applicable to **order-level** campaign. 
	EaterType string `json:"eaterType"`
	// The minimum basket amount to be eligible for the campaign. Only applicable for **order-level** campaign. For example, 10.5 means the basket amount has to be at least $10.50.
	MinBasketAmount *float64 `json:"minBasketAmount,omitempty"`
	// Specify the bundle quantity for bundle offer campaign.
	BundleQuantity *int32 `json:"bundleQuantity,omitempty"`
	WorkingHour *WorkingHour `json:"workingHour,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CampaignConditions CampaignConditions

// NewCampaignConditions instantiates a new CampaignConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignConditions(startTime time.Time, endTime time.Time, eaterType string) *CampaignConditions {
	this := CampaignConditions{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.EaterType = eaterType
	return &this
}

// NewCampaignConditionsWithDefaults instantiates a new CampaignConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignConditionsWithDefaults() *CampaignConditions {
	this := CampaignConditions{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *CampaignConditions) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *CampaignConditions) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *CampaignConditions) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *CampaignConditions) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *CampaignConditions) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *CampaignConditions) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetEaterType returns the EaterType field value
func (o *CampaignConditions) GetEaterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EaterType
}

// GetEaterTypeOk returns a tuple with the EaterType field value
// and a boolean to check if the value has been set.
func (o *CampaignConditions) GetEaterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EaterType, true
}

// SetEaterType sets field value
func (o *CampaignConditions) SetEaterType(v string) {
	o.EaterType = v
}

// GetMinBasketAmount returns the MinBasketAmount field value if set, zero value otherwise.
func (o *CampaignConditions) GetMinBasketAmount() float64 {
	if o == nil || IsNil(o.MinBasketAmount) {
		var ret float64
		return ret
	}
	return *o.MinBasketAmount
}

// GetMinBasketAmountOk returns a tuple with the MinBasketAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignConditions) GetMinBasketAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.MinBasketAmount) {
		return nil, false
	}
	return o.MinBasketAmount, true
}

// HasMinBasketAmount returns a boolean if a field has been set.
func (o *CampaignConditions) HasMinBasketAmount() bool {
	if o != nil && !IsNil(o.MinBasketAmount) {
		return true
	}

	return false
}

// SetMinBasketAmount gets a reference to the given float64 and assigns it to the MinBasketAmount field.
func (o *CampaignConditions) SetMinBasketAmount(v float64) {
	o.MinBasketAmount = &v
}

// GetBundleQuantity returns the BundleQuantity field value if set, zero value otherwise.
func (o *CampaignConditions) GetBundleQuantity() int32 {
	if o == nil || IsNil(o.BundleQuantity) {
		var ret int32
		return ret
	}
	return *o.BundleQuantity
}

// GetBundleQuantityOk returns a tuple with the BundleQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignConditions) GetBundleQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.BundleQuantity) {
		return nil, false
	}
	return o.BundleQuantity, true
}

// HasBundleQuantity returns a boolean if a field has been set.
func (o *CampaignConditions) HasBundleQuantity() bool {
	if o != nil && !IsNil(o.BundleQuantity) {
		return true
	}

	return false
}

// SetBundleQuantity gets a reference to the given int32 and assigns it to the BundleQuantity field.
func (o *CampaignConditions) SetBundleQuantity(v int32) {
	o.BundleQuantity = &v
}

// GetWorkingHour returns the WorkingHour field value if set, zero value otherwise.
func (o *CampaignConditions) GetWorkingHour() WorkingHour {
	if o == nil || IsNil(o.WorkingHour) {
		var ret WorkingHour
		return ret
	}
	return *o.WorkingHour
}

// GetWorkingHourOk returns a tuple with the WorkingHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignConditions) GetWorkingHourOk() (*WorkingHour, bool) {
	if o == nil || IsNil(o.WorkingHour) {
		return nil, false
	}
	return o.WorkingHour, true
}

// HasWorkingHour returns a boolean if a field has been set.
func (o *CampaignConditions) HasWorkingHour() bool {
	if o != nil && !IsNil(o.WorkingHour) {
		return true
	}

	return false
}

// SetWorkingHour gets a reference to the given WorkingHour and assigns it to the WorkingHour field.
func (o *CampaignConditions) SetWorkingHour(v WorkingHour) {
	o.WorkingHour = &v
}

func (o CampaignConditions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignConditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["eaterType"] = o.EaterType
	if !IsNil(o.MinBasketAmount) {
		toSerialize["minBasketAmount"] = o.MinBasketAmount
	}
	if !IsNil(o.BundleQuantity) {
		toSerialize["bundleQuantity"] = o.BundleQuantity
	}
	if !IsNil(o.WorkingHour) {
		toSerialize["workingHour"] = o.WorkingHour
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CampaignConditions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTime",
		"endTime",
		"eaterType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCampaignConditions := _CampaignConditions{}

	err = json.Unmarshal(data, &varCampaignConditions)

	if err != nil {
		return err
	}

	*o = CampaignConditions(varCampaignConditions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "endTime")
		delete(additionalProperties, "eaterType")
		delete(additionalProperties, "minBasketAmount")
		delete(additionalProperties, "bundleQuantity")
		delete(additionalProperties, "workingHour")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCampaignConditions struct {
	value *CampaignConditions
	isSet bool
}

func (v NullableCampaignConditions) Get() *CampaignConditions {
	return v.value
}

func (v *NullableCampaignConditions) Set(val *CampaignConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignConditions(val *CampaignConditions) *NullableCampaignConditions {
	return &NullableCampaignConditions{value: val, isSet: true}
}

func (v NullableCampaignConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


