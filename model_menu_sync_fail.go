// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the MenuSyncFail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSyncFail{}

// MenuSyncFail struct for MenuSyncFail
type MenuSyncFail struct {
	Id *string `json:"id,omitempty"`
	// An array of strings of error message.
	Errors []string `json:"errors,omitempty"`
	ServiceHours *MenuSyncFailServiceHours `json:"serviceHours,omitempty"`
	Categories []MenuSyncFailCategory `json:"categories,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MenuSyncFail MenuSyncFail

// NewMenuSyncFail instantiates a new MenuSyncFail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSyncFail() *MenuSyncFail {
	this := MenuSyncFail{}
	return &this
}

// NewMenuSyncFailWithDefaults instantiates a new MenuSyncFail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSyncFailWithDefaults() *MenuSyncFail {
	this := MenuSyncFail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MenuSyncFail) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFail) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MenuSyncFail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MenuSyncFail) SetId(v string) {
	o.Id = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *MenuSyncFail) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFail) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *MenuSyncFail) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *MenuSyncFail) SetErrors(v []string) {
	o.Errors = v
}

// GetServiceHours returns the ServiceHours field value if set, zero value otherwise.
func (o *MenuSyncFail) GetServiceHours() MenuSyncFailServiceHours {
	if o == nil || IsNil(o.ServiceHours) {
		var ret MenuSyncFailServiceHours
		return ret
	}
	return *o.ServiceHours
}

// GetServiceHoursOk returns a tuple with the ServiceHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFail) GetServiceHoursOk() (*MenuSyncFailServiceHours, bool) {
	if o == nil || IsNil(o.ServiceHours) {
		return nil, false
	}
	return o.ServiceHours, true
}

// HasServiceHours returns a boolean if a field has been set.
func (o *MenuSyncFail) HasServiceHours() bool {
	if o != nil && !IsNil(o.ServiceHours) {
		return true
	}

	return false
}

// SetServiceHours gets a reference to the given MenuSyncFailServiceHours and assigns it to the ServiceHours field.
func (o *MenuSyncFail) SetServiceHours(v MenuSyncFailServiceHours) {
	o.ServiceHours = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *MenuSyncFail) GetCategories() []MenuSyncFailCategory {
	if o == nil || IsNil(o.Categories) {
		var ret []MenuSyncFailCategory
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFail) GetCategoriesOk() ([]MenuSyncFailCategory, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *MenuSyncFail) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []MenuSyncFailCategory and assigns it to the Categories field.
func (o *MenuSyncFail) SetCategories(v []MenuSyncFailCategory) {
	o.Categories = v
}

func (o MenuSyncFail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSyncFail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.ServiceHours) {
		toSerialize["serviceHours"] = o.ServiceHours
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuSyncFail) UnmarshalJSON(data []byte) (err error) {
	varMenuSyncFail := _MenuSyncFail{}

	err = json.Unmarshal(data, &varMenuSyncFail)

	if err != nil {
		return err
	}

	*o = MenuSyncFail(varMenuSyncFail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "serviceHours")
		delete(additionalProperties, "categories")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuSyncFail struct {
	value *MenuSyncFail
	isSet bool
}

func (v NullableMenuSyncFail) Get() *MenuSyncFail {
	return v.value
}

func (v *NullableMenuSyncFail) Set(val *MenuSyncFail) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSyncFail) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSyncFail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSyncFail(val *MenuSyncFail) *NullableMenuSyncFail {
	return &NullableMenuSyncFail{value: val, isSet: true}
}

func (v NullableMenuSyncFail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSyncFail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


