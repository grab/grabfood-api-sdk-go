// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the GetMenuNewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMenuNewResponse{}

// GetMenuNewResponse 
type GetMenuNewResponse struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID *string `json:"merchantID,omitempty"`
	// The merchant's ID that is on the partner's database.
	PartnerMerchantID *string `json:"partnerMerchantID,omitempty"`
	Currency Currency `json:"currency"`
	// An array of sellingTimes JSON objects. Max 20 allowed. Refer to [Selling Times](#selling-times) for more information.
	SellingTimes []SellingTime `json:"sellingTimes"`
	// An array of category JSON objects. Max 100 allowed per section. Refer to [Categories](#categories) for more information.
	Categories []MenuCategory `json:"categories"`
	AdditionalProperties map[string]interface{}
}

type _GetMenuNewResponse GetMenuNewResponse

// NewGetMenuNewResponse instantiates a new GetMenuNewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMenuNewResponse(currency Currency, sellingTimes []SellingTime, categories []MenuCategory) *GetMenuNewResponse {
	this := GetMenuNewResponse{}
	this.Currency = currency
	this.SellingTimes = sellingTimes
	this.Categories = categories
	return &this
}

// NewGetMenuNewResponseWithDefaults instantiates a new GetMenuNewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMenuNewResponseWithDefaults() *GetMenuNewResponse {
	this := GetMenuNewResponse{}
	return &this
}

// GetMerchantID returns the MerchantID field value if set, zero value otherwise.
func (o *GetMenuNewResponse) GetMerchantID() string {
	if o == nil || IsNil(o.MerchantID) {
		var ret string
		return ret
	}
	return *o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMenuNewResponse) GetMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantID) {
		return nil, false
	}
	return o.MerchantID, true
}

// HasMerchantID returns a boolean if a field has been set.
func (o *GetMenuNewResponse) HasMerchantID() bool {
	if o != nil && !IsNil(o.MerchantID) {
		return true
	}

	return false
}

// SetMerchantID gets a reference to the given string and assigns it to the MerchantID field.
func (o *GetMenuNewResponse) SetMerchantID(v string) {
	o.MerchantID = &v
}

// GetPartnerMerchantID returns the PartnerMerchantID field value if set, zero value otherwise.
func (o *GetMenuNewResponse) GetPartnerMerchantID() string {
	if o == nil || IsNil(o.PartnerMerchantID) {
		var ret string
		return ret
	}
	return *o.PartnerMerchantID
}

// GetPartnerMerchantIDOk returns a tuple with the PartnerMerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMenuNewResponse) GetPartnerMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerMerchantID) {
		return nil, false
	}
	return o.PartnerMerchantID, true
}

// HasPartnerMerchantID returns a boolean if a field has been set.
func (o *GetMenuNewResponse) HasPartnerMerchantID() bool {
	if o != nil && !IsNil(o.PartnerMerchantID) {
		return true
	}

	return false
}

// SetPartnerMerchantID gets a reference to the given string and assigns it to the PartnerMerchantID field.
func (o *GetMenuNewResponse) SetPartnerMerchantID(v string) {
	o.PartnerMerchantID = &v
}

// GetCurrency returns the Currency field value
func (o *GetMenuNewResponse) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *GetMenuNewResponse) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *GetMenuNewResponse) SetCurrency(v Currency) {
	o.Currency = v
}

// GetSellingTimes returns the SellingTimes field value
func (o *GetMenuNewResponse) GetSellingTimes() []SellingTime {
	if o == nil {
		var ret []SellingTime
		return ret
	}

	return o.SellingTimes
}

// GetSellingTimesOk returns a tuple with the SellingTimes field value
// and a boolean to check if the value has been set.
func (o *GetMenuNewResponse) GetSellingTimesOk() ([]SellingTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellingTimes, true
}

// SetSellingTimes sets field value
func (o *GetMenuNewResponse) SetSellingTimes(v []SellingTime) {
	o.SellingTimes = v
}

// GetCategories returns the Categories field value
func (o *GetMenuNewResponse) GetCategories() []MenuCategory {
	if o == nil {
		var ret []MenuCategory
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *GetMenuNewResponse) GetCategoriesOk() ([]MenuCategory, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *GetMenuNewResponse) SetCategories(v []MenuCategory) {
	o.Categories = v
}

func (o GetMenuNewResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMenuNewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantID) {
		toSerialize["merchantID"] = o.MerchantID
	}
	if !IsNil(o.PartnerMerchantID) {
		toSerialize["partnerMerchantID"] = o.PartnerMerchantID
	}
	toSerialize["currency"] = o.Currency
	toSerialize["sellingTimes"] = o.SellingTimes
	toSerialize["categories"] = o.Categories

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetMenuNewResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"sellingTimes",
		"categories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMenuNewResponse := _GetMenuNewResponse{}

	err = json.Unmarshal(data, &varGetMenuNewResponse)

	if err != nil {
		return err
	}

	*o = GetMenuNewResponse(varGetMenuNewResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "partnerMerchantID")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "sellingTimes")
		delete(additionalProperties, "categories")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetMenuNewResponse struct {
	value *GetMenuNewResponse
	isSet bool
}

func (v NullableGetMenuNewResponse) Get() *GetMenuNewResponse {
	return v.value
}

func (v *NullableGetMenuNewResponse) Set(val *GetMenuNewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMenuNewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMenuNewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMenuNewResponse(val *GetMenuNewResponse) *NullableGetMenuNewResponse {
	return &NullableGetMenuNewResponse{value: val, isSet: true}
}

func (v NullableGetMenuNewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMenuNewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


