// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the BatchUpdateMenuItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchUpdateMenuItem{}

// BatchUpdateMenuItem Information about the GrabFood client updating their food menu. 
type BatchUpdateMenuItem struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID string `json:"merchantID"`
	// The record type that you want to update.
	Field string `json:"field"`
	// The items in an array of JSON Object. 
	MenuEntities []MenuEntity `json:"menuEntities,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BatchUpdateMenuItem BatchUpdateMenuItem

// NewBatchUpdateMenuItem instantiates a new BatchUpdateMenuItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchUpdateMenuItem(merchantID string, field string) *BatchUpdateMenuItem {
	this := BatchUpdateMenuItem{}
	this.MerchantID = merchantID
	this.Field = field
	return &this
}

// NewBatchUpdateMenuItemWithDefaults instantiates a new BatchUpdateMenuItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchUpdateMenuItemWithDefaults() *BatchUpdateMenuItem {
	this := BatchUpdateMenuItem{}
	return &this
}

// GetMerchantID returns the MerchantID field value
func (o *BatchUpdateMenuItem) GetMerchantID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value
// and a boolean to check if the value has been set.
func (o *BatchUpdateMenuItem) GetMerchantIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantID, true
}

// SetMerchantID sets field value
func (o *BatchUpdateMenuItem) SetMerchantID(v string) {
	o.MerchantID = v
}

// GetField returns the Field field value
func (o *BatchUpdateMenuItem) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *BatchUpdateMenuItem) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *BatchUpdateMenuItem) SetField(v string) {
	o.Field = v
}

// GetMenuEntities returns the MenuEntities field value if set, zero value otherwise.
func (o *BatchUpdateMenuItem) GetMenuEntities() []MenuEntity {
	if o == nil || IsNil(o.MenuEntities) {
		var ret []MenuEntity
		return ret
	}
	return o.MenuEntities
}

// GetMenuEntitiesOk returns a tuple with the MenuEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchUpdateMenuItem) GetMenuEntitiesOk() ([]MenuEntity, bool) {
	if o == nil || IsNil(o.MenuEntities) {
		return nil, false
	}
	return o.MenuEntities, true
}

// HasMenuEntities returns a boolean if a field has been set.
func (o *BatchUpdateMenuItem) HasMenuEntities() bool {
	if o != nil && !IsNil(o.MenuEntities) {
		return true
	}

	return false
}

// SetMenuEntities gets a reference to the given []MenuEntity and assigns it to the MenuEntities field.
func (o *BatchUpdateMenuItem) SetMenuEntities(v []MenuEntity) {
	o.MenuEntities = v
}

func (o BatchUpdateMenuItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchUpdateMenuItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantID"] = o.MerchantID
	toSerialize["field"] = o.Field
	if !IsNil(o.MenuEntities) {
		toSerialize["menuEntities"] = o.MenuEntities
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BatchUpdateMenuItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantID",
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchUpdateMenuItem := _BatchUpdateMenuItem{}

	err = json.Unmarshal(data, &varBatchUpdateMenuItem)

	if err != nil {
		return err
	}

	*o = BatchUpdateMenuItem(varBatchUpdateMenuItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "field")
		delete(additionalProperties, "menuEntities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBatchUpdateMenuItem struct {
	value *BatchUpdateMenuItem
	isSet bool
}

func (v NullableBatchUpdateMenuItem) Get() *BatchUpdateMenuItem {
	return v.value
}

func (v *NullableBatchUpdateMenuItem) Set(val *BatchUpdateMenuItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchUpdateMenuItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchUpdateMenuItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchUpdateMenuItem(val *BatchUpdateMenuItem) *NullableBatchUpdateMenuItem {
	return &NullableBatchUpdateMenuItem{value: val, isSet: true}
}

func (v NullableBatchUpdateMenuItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchUpdateMenuItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


