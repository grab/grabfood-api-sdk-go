// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the CancelReason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelReason{}

// CancelReason struct for CancelReason
type CancelReason struct {
	Code *CancelCode `json:"code,omitempty"`
	// The detailed cancel reason for the specific cancel code. - Items are unavailable <code 1001> - I have too many orders now <code 1002> - My shop is closed <code 1003> - My shop is closing soon <code 1004> 
	Reason *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CancelReason CancelReason

// NewCancelReason instantiates a new CancelReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelReason() *CancelReason {
	this := CancelReason{}
	return &this
}

// NewCancelReasonWithDefaults instantiates a new CancelReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelReasonWithDefaults() *CancelReason {
	this := CancelReason{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CancelReason) GetCode() CancelCode {
	if o == nil || IsNil(o.Code) {
		var ret CancelCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReason) GetCodeOk() (*CancelCode, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CancelReason) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CancelCode and assigns it to the Code field.
func (o *CancelReason) SetCode(v CancelCode) {
	o.Code = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CancelReason) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReason) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CancelReason) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CancelReason) SetReason(v string) {
	o.Reason = &v
}

func (o CancelReason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelReason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CancelReason) UnmarshalJSON(data []byte) (err error) {
	varCancelReason := _CancelReason{}

	err = json.Unmarshal(data, &varCancelReason)

	if err != nil {
		return err
	}

	*o = CancelReason(varCancelReason)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCancelReason struct {
	value *CancelReason
	isSet bool
}

func (v NullableCancelReason) Get() *CancelReason {
	return v.value
}

func (v *NullableCancelReason) Set(val *CancelReason) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelReason) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelReason(val *CancelReason) *NullableCancelReason {
	return &NullableCancelReason{value: val, isSet: true}
}

func (v NullableCancelReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


