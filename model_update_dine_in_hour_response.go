// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the UpdateDineInHourResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDineInHourResponse{}

// UpdateDineInHourResponse Object contain update store dine-in hour response
type UpdateDineInHourResponse struct {
	// Error message when updating store dine-in hour. `null` indicates no error.
	ErrorReasons []string `json:"errorReasons,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDineInHourResponse UpdateDineInHourResponse

// NewUpdateDineInHourResponse instantiates a new UpdateDineInHourResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDineInHourResponse() *UpdateDineInHourResponse {
	this := UpdateDineInHourResponse{}
	return &this
}

// NewUpdateDineInHourResponseWithDefaults instantiates a new UpdateDineInHourResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDineInHourResponseWithDefaults() *UpdateDineInHourResponse {
	this := UpdateDineInHourResponse{}
	return &this
}

// GetErrorReasons returns the ErrorReasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDineInHourResponse) GetErrorReasons() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ErrorReasons
}

// GetErrorReasonsOk returns a tuple with the ErrorReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDineInHourResponse) GetErrorReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.ErrorReasons) {
		return nil, false
	}
	return o.ErrorReasons, true
}

// HasErrorReasons returns a boolean if a field has been set.
func (o *UpdateDineInHourResponse) HasErrorReasons() bool {
	if o != nil && !IsNil(o.ErrorReasons) {
		return true
	}

	return false
}

// SetErrorReasons gets a reference to the given []string and assigns it to the ErrorReasons field.
func (o *UpdateDineInHourResponse) SetErrorReasons(v []string) {
	o.ErrorReasons = v
}

func (o UpdateDineInHourResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDineInHourResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorReasons != nil {
		toSerialize["errorReasons"] = o.ErrorReasons
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDineInHourResponse) UnmarshalJSON(data []byte) (err error) {
	varUpdateDineInHourResponse := _UpdateDineInHourResponse{}

	err = json.Unmarshal(data, &varUpdateDineInHourResponse)

	if err != nil {
		return err
	}

	*o = UpdateDineInHourResponse(varUpdateDineInHourResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errorReasons")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDineInHourResponse struct {
	value *UpdateDineInHourResponse
	isSet bool
}

func (v NullableUpdateDineInHourResponse) Get() *UpdateDineInHourResponse {
	return v.value
}

func (v *NullableUpdateDineInHourResponse) Set(val *UpdateDineInHourResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDineInHourResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDineInHourResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDineInHourResponse(val *UpdateDineInHourResponse) *NullableUpdateDineInHourResponse {
	return &NullableUpdateDineInHourResponse{value: val, isSet: true}
}

func (v NullableUpdateDineInHourResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDineInHourResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


