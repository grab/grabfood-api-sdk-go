// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Address{}

// Address A JSON object containing the receiverâ€™s location information.
type Address struct {
	// The delivery address' unit number.
	UnitNumber *string `json:"unitNumber,omitempty"`
	// Instructions for the delivery.
	DeliveryInstruction *string `json:"deliveryInstruction,omitempty"`
	// POI source
	PoiSource *string `json:"poiSource,omitempty"`
	// POI ID, empty when poiSource is GRAB.
	PoiID *string `json:"poiID,omitempty"`
	// The delivery address containing street name, city, postal code, and country. Has value only when poiSource is `GRAB`.
	Address *string `json:"address,omitempty"`
	// The postcode of the delivery address. Has value only when poiSource is `GRAB`.
	Postcode *string `json:"postcode,omitempty"`
	Coordinates *Coordinates `json:"coordinates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Address Address

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress() *Address {
	this := Address{}
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetUnitNumber returns the UnitNumber field value if set, zero value otherwise.
func (o *Address) GetUnitNumber() string {
	if o == nil || IsNil(o.UnitNumber) {
		var ret string
		return ret
	}
	return *o.UnitNumber
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetUnitNumberOk() (*string, bool) {
	if o == nil || IsNil(o.UnitNumber) {
		return nil, false
	}
	return o.UnitNumber, true
}

// HasUnitNumber returns a boolean if a field has been set.
func (o *Address) HasUnitNumber() bool {
	if o != nil && !IsNil(o.UnitNumber) {
		return true
	}

	return false
}

// SetUnitNumber gets a reference to the given string and assigns it to the UnitNumber field.
func (o *Address) SetUnitNumber(v string) {
	o.UnitNumber = &v
}

// GetDeliveryInstruction returns the DeliveryInstruction field value if set, zero value otherwise.
func (o *Address) GetDeliveryInstruction() string {
	if o == nil || IsNil(o.DeliveryInstruction) {
		var ret string
		return ret
	}
	return *o.DeliveryInstruction
}

// GetDeliveryInstructionOk returns a tuple with the DeliveryInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetDeliveryInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryInstruction) {
		return nil, false
	}
	return o.DeliveryInstruction, true
}

// HasDeliveryInstruction returns a boolean if a field has been set.
func (o *Address) HasDeliveryInstruction() bool {
	if o != nil && !IsNil(o.DeliveryInstruction) {
		return true
	}

	return false
}

// SetDeliveryInstruction gets a reference to the given string and assigns it to the DeliveryInstruction field.
func (o *Address) SetDeliveryInstruction(v string) {
	o.DeliveryInstruction = &v
}

// GetPoiSource returns the PoiSource field value if set, zero value otherwise.
func (o *Address) GetPoiSource() string {
	if o == nil || IsNil(o.PoiSource) {
		var ret string
		return ret
	}
	return *o.PoiSource
}

// GetPoiSourceOk returns a tuple with the PoiSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPoiSourceOk() (*string, bool) {
	if o == nil || IsNil(o.PoiSource) {
		return nil, false
	}
	return o.PoiSource, true
}

// HasPoiSource returns a boolean if a field has been set.
func (o *Address) HasPoiSource() bool {
	if o != nil && !IsNil(o.PoiSource) {
		return true
	}

	return false
}

// SetPoiSource gets a reference to the given string and assigns it to the PoiSource field.
func (o *Address) SetPoiSource(v string) {
	o.PoiSource = &v
}

// GetPoiID returns the PoiID field value if set, zero value otherwise.
func (o *Address) GetPoiID() string {
	if o == nil || IsNil(o.PoiID) {
		var ret string
		return ret
	}
	return *o.PoiID
}

// GetPoiIDOk returns a tuple with the PoiID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPoiIDOk() (*string, bool) {
	if o == nil || IsNil(o.PoiID) {
		return nil, false
	}
	return o.PoiID, true
}

// HasPoiID returns a boolean if a field has been set.
func (o *Address) HasPoiID() bool {
	if o != nil && !IsNil(o.PoiID) {
		return true
	}

	return false
}

// SetPoiID gets a reference to the given string and assigns it to the PoiID field.
func (o *Address) SetPoiID(v string) {
	o.PoiID = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Address) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Address) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Address) SetAddress(v string) {
	o.Address = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *Address) GetPostcode() string {
	if o == nil || IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *Address) HasPostcode() bool {
	if o != nil && !IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *Address) SetPostcode(v string) {
	o.Postcode = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *Address) GetCoordinates() Coordinates {
	if o == nil || IsNil(o.Coordinates) {
		var ret Coordinates
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCoordinatesOk() (*Coordinates, bool) {
	if o == nil || IsNil(o.Coordinates) {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *Address) HasCoordinates() bool {
	if o != nil && !IsNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given Coordinates and assigns it to the Coordinates field.
func (o *Address) SetCoordinates(v Coordinates) {
	o.Coordinates = &v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitNumber) {
		toSerialize["unitNumber"] = o.UnitNumber
	}
	if !IsNil(o.DeliveryInstruction) {
		toSerialize["deliveryInstruction"] = o.DeliveryInstruction
	}
	if !IsNil(o.PoiSource) {
		toSerialize["poiSource"] = o.PoiSource
	}
	if !IsNil(o.PoiID) {
		toSerialize["poiID"] = o.PoiID
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	if !IsNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Address) UnmarshalJSON(data []byte) (err error) {
	varAddress := _Address{}

	err = json.Unmarshal(data, &varAddress)

	if err != nil {
		return err
	}

	*o = Address(varAddress)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "unitNumber")
		delete(additionalProperties, "deliveryInstruction")
		delete(additionalProperties, "poiSource")
		delete(additionalProperties, "poiID")
		delete(additionalProperties, "address")
		delete(additionalProperties, "postcode")
		delete(additionalProperties, "coordinates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


