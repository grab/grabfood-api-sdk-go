// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the GetRewardNativeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRewardNativeResponse{}

// GetRewardNativeResponse This response returns reward points earn for this order. 
type GetRewardNativeResponse struct {
	// The reward points earned in this purchase.
	Points int64 `json:"points"`
	AdditionalProperties map[string]interface{}
}

type _GetRewardNativeResponse GetRewardNativeResponse

// NewGetRewardNativeResponse instantiates a new GetRewardNativeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRewardNativeResponse(points int64) *GetRewardNativeResponse {
	this := GetRewardNativeResponse{}
	this.Points = points
	return &this
}

// NewGetRewardNativeResponseWithDefaults instantiates a new GetRewardNativeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRewardNativeResponseWithDefaults() *GetRewardNativeResponse {
	this := GetRewardNativeResponse{}
	return &this
}

// GetPoints returns the Points field value
func (o *GetRewardNativeResponse) GetPoints() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *GetRewardNativeResponse) GetPointsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Points, true
}

// SetPoints sets field value
func (o *GetRewardNativeResponse) SetPoints(v int64) {
	o.Points = v
}

func (o GetRewardNativeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRewardNativeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["points"] = o.Points

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetRewardNativeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"points",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRewardNativeResponse := _GetRewardNativeResponse{}

	err = json.Unmarshal(data, &varGetRewardNativeResponse)

	if err != nil {
		return err
	}

	*o = GetRewardNativeResponse(varGetRewardNativeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "points")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetRewardNativeResponse struct {
	value *GetRewardNativeResponse
	isSet bool
}

func (v NullableGetRewardNativeResponse) Get() *GetRewardNativeResponse {
	return v.value
}

func (v *NullableGetRewardNativeResponse) Set(val *GetRewardNativeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRewardNativeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRewardNativeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRewardNativeResponse(val *GetRewardNativeResponse) *NullableGetRewardNativeResponse {
	return &NullableGetRewardNativeResponse{value: val, isSet: true}
}

func (v NullableGetRewardNativeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRewardNativeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


