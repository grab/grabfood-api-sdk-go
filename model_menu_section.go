// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the MenuSection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSection{}

// MenuSection struct for MenuSection
type MenuSection struct {
	// The section's ID in the partner system. 
	Id string `json:"id"`
	// The name of the section.
	Name string `json:"name"`
	ServiceHours ServiceHours `json:"serviceHours"`
	// An array of category JSON objects. Max 100 allowed per section. Refer to [Categories](#categories) for more information.
	Categories []MenuSectionCategory `json:"categories"`
	AdditionalProperties map[string]interface{}
}

type _MenuSection MenuSection

// NewMenuSection instantiates a new MenuSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSection(id string, name string, serviceHours ServiceHours, categories []MenuSectionCategory) *MenuSection {
	this := MenuSection{}
	this.Id = id
	this.Name = name
	this.ServiceHours = serviceHours
	this.Categories = categories
	return &this
}

// NewMenuSectionWithDefaults instantiates a new MenuSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSectionWithDefaults() *MenuSection {
	this := MenuSection{}
	return &this
}

// GetId returns the Id field value
func (o *MenuSection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MenuSection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MenuSection) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MenuSection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MenuSection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MenuSection) SetName(v string) {
	o.Name = v
}

// GetServiceHours returns the ServiceHours field value
func (o *MenuSection) GetServiceHours() ServiceHours {
	if o == nil {
		var ret ServiceHours
		return ret
	}

	return o.ServiceHours
}

// GetServiceHoursOk returns a tuple with the ServiceHours field value
// and a boolean to check if the value has been set.
func (o *MenuSection) GetServiceHoursOk() (*ServiceHours, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceHours, true
}

// SetServiceHours sets field value
func (o *MenuSection) SetServiceHours(v ServiceHours) {
	o.ServiceHours = v
}

// GetCategories returns the Categories field value
func (o *MenuSection) GetCategories() []MenuSectionCategory {
	if o == nil {
		var ret []MenuSectionCategory
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *MenuSection) GetCategoriesOk() ([]MenuSectionCategory, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *MenuSection) SetCategories(v []MenuSectionCategory) {
	o.Categories = v
}

func (o MenuSection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["serviceHours"] = o.ServiceHours
	toSerialize["categories"] = o.Categories

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuSection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"serviceHours",
		"categories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuSection := _MenuSection{}

	err = json.Unmarshal(data, &varMenuSection)

	if err != nil {
		return err
	}

	*o = MenuSection(varMenuSection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "serviceHours")
		delete(additionalProperties, "categories")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuSection struct {
	value *MenuSection
	isSet bool
}

func (v NullableMenuSection) Get() *MenuSection {
	return v.value
}

func (v *NullableMenuSection) Set(val *MenuSection) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSection) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSection(val *MenuSection) *NullableMenuSection {
	return &NullableMenuSection{value: val, isSet: true}
}

func (v NullableMenuSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


