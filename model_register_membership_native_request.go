// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the RegisterMembershipNativeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterMembershipNativeRequest{}

// RegisterMembershipNativeRequest This request submits membership registration request to partner. 
type RegisterMembershipNativeRequest struct {
	// The id used to identify an unique grab user.
	GrabID string `json:"grabID"`
	// Grab user's phone number for registration.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Grab user's name for registration.
	Name *string `json:"name,omitempty"`
	// Grab user's email address for registration.
	Email *string `json:"email,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RegisterMembershipNativeRequest RegisterMembershipNativeRequest

// NewRegisterMembershipNativeRequest instantiates a new RegisterMembershipNativeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterMembershipNativeRequest(grabID string) *RegisterMembershipNativeRequest {
	this := RegisterMembershipNativeRequest{}
	this.GrabID = grabID
	return &this
}

// NewRegisterMembershipNativeRequestWithDefaults instantiates a new RegisterMembershipNativeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterMembershipNativeRequestWithDefaults() *RegisterMembershipNativeRequest {
	this := RegisterMembershipNativeRequest{}
	return &this
}

// GetGrabID returns the GrabID field value
func (o *RegisterMembershipNativeRequest) GetGrabID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrabID
}

// GetGrabIDOk returns a tuple with the GrabID field value
// and a boolean to check if the value has been set.
func (o *RegisterMembershipNativeRequest) GetGrabIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrabID, true
}

// SetGrabID sets field value
func (o *RegisterMembershipNativeRequest) SetGrabID(v string) {
	o.GrabID = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *RegisterMembershipNativeRequest) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterMembershipNativeRequest) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *RegisterMembershipNativeRequest) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *RegisterMembershipNativeRequest) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegisterMembershipNativeRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterMembershipNativeRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegisterMembershipNativeRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegisterMembershipNativeRequest) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RegisterMembershipNativeRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterMembershipNativeRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RegisterMembershipNativeRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RegisterMembershipNativeRequest) SetEmail(v string) {
	o.Email = &v
}

func (o RegisterMembershipNativeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterMembershipNativeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grabID"] = o.GrabID
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RegisterMembershipNativeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grabID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterMembershipNativeRequest := _RegisterMembershipNativeRequest{}

	err = json.Unmarshal(data, &varRegisterMembershipNativeRequest)

	if err != nil {
		return err
	}

	*o = RegisterMembershipNativeRequest(varRegisterMembershipNativeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "grabID")
		delete(additionalProperties, "phoneNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegisterMembershipNativeRequest struct {
	value *RegisterMembershipNativeRequest
	isSet bool
}

func (v NullableRegisterMembershipNativeRequest) Get() *RegisterMembershipNativeRequest {
	return v.value
}

func (v *NullableRegisterMembershipNativeRequest) Set(val *RegisterMembershipNativeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterMembershipNativeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterMembershipNativeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterMembershipNativeRequest(val *RegisterMembershipNativeRequest) *NullableRegisterMembershipNativeRequest {
	return &NullableRegisterMembershipNativeRequest{value: val, isSet: true}
}

func (v NullableRegisterMembershipNativeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterMembershipNativeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


