// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the UpdateAdvancedPricing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAdvancedPricing{}

// UpdateAdvancedPricing struct for UpdateAdvancedPricing
type UpdateAdvancedPricing struct {
	// Available service type.
	Key *string `json:"key,omitempty"`
	// Price in minor unit.
	Price *int64 `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateAdvancedPricing UpdateAdvancedPricing

// NewUpdateAdvancedPricing instantiates a new UpdateAdvancedPricing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAdvancedPricing() *UpdateAdvancedPricing {
	this := UpdateAdvancedPricing{}
	return &this
}

// NewUpdateAdvancedPricingWithDefaults instantiates a new UpdateAdvancedPricing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAdvancedPricingWithDefaults() *UpdateAdvancedPricing {
	this := UpdateAdvancedPricing{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UpdateAdvancedPricing) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAdvancedPricing) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UpdateAdvancedPricing) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UpdateAdvancedPricing) SetKey(v string) {
	o.Key = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UpdateAdvancedPricing) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAdvancedPricing) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UpdateAdvancedPricing) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *UpdateAdvancedPricing) SetPrice(v int64) {
	o.Price = &v
}

func (o UpdateAdvancedPricing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAdvancedPricing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateAdvancedPricing) UnmarshalJSON(data []byte) (err error) {
	varUpdateAdvancedPricing := _UpdateAdvancedPricing{}

	err = json.Unmarshal(data, &varUpdateAdvancedPricing)

	if err != nil {
		return err
	}

	*o = UpdateAdvancedPricing(varUpdateAdvancedPricing)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateAdvancedPricing struct {
	value *UpdateAdvancedPricing
	isSet bool
}

func (v NullableUpdateAdvancedPricing) Get() *UpdateAdvancedPricing {
	return v.value
}

func (v *NullableUpdateAdvancedPricing) Set(val *UpdateAdvancedPricing) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAdvancedPricing) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAdvancedPricing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAdvancedPricing(val *UpdateAdvancedPricing) *NullableUpdateAdvancedPricing {
	return &NullableUpdateAdvancedPricing{value: val, isSet: true}
}

func (v NullableUpdateAdvancedPricing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAdvancedPricing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


