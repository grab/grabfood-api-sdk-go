// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the MenuSyncFailServiceHours type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSyncFailServiceHours{}

// MenuSyncFailServiceHours struct for MenuSyncFailServiceHours
type MenuSyncFailServiceHours struct {
	// An array of strings of error message.
	Errors []string `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MenuSyncFailServiceHours MenuSyncFailServiceHours

// NewMenuSyncFailServiceHours instantiates a new MenuSyncFailServiceHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSyncFailServiceHours() *MenuSyncFailServiceHours {
	this := MenuSyncFailServiceHours{}
	return &this
}

// NewMenuSyncFailServiceHoursWithDefaults instantiates a new MenuSyncFailServiceHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSyncFailServiceHoursWithDefaults() *MenuSyncFailServiceHours {
	this := MenuSyncFailServiceHours{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *MenuSyncFailServiceHours) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFailServiceHours) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *MenuSyncFailServiceHours) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *MenuSyncFailServiceHours) SetErrors(v []string) {
	o.Errors = v
}

func (o MenuSyncFailServiceHours) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSyncFailServiceHours) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuSyncFailServiceHours) UnmarshalJSON(data []byte) (err error) {
	varMenuSyncFailServiceHours := _MenuSyncFailServiceHours{}

	err = json.Unmarshal(data, &varMenuSyncFailServiceHours)

	if err != nil {
		return err
	}

	*o = MenuSyncFailServiceHours(varMenuSyncFailServiceHours)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuSyncFailServiceHours struct {
	value *MenuSyncFailServiceHours
	isSet bool
}

func (v NullableMenuSyncFailServiceHours) Get() *MenuSyncFailServiceHours {
	return v.value
}

func (v *NullableMenuSyncFailServiceHours) Set(val *MenuSyncFailServiceHours) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSyncFailServiceHours) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSyncFailServiceHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSyncFailServiceHours(val *MenuSyncFailServiceHours) *NullableMenuSyncFailServiceHours {
	return &NullableMenuSyncFailServiceHours{value: val, isSet: true}
}

func (v NullableMenuSyncFailServiceHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSyncFailServiceHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


