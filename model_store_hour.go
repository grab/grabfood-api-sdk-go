// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the StoreHour type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreHour{}

// StoreHour A JSON object that describes the store hour for each day.
type StoreHour struct {
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Mon []OpenPeriod `json:"mon"`
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Tue []OpenPeriod `json:"tue"`
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Wed []OpenPeriod `json:"wed"`
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Thu []OpenPeriod `json:"thu"`
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Fri []OpenPeriod `json:"fri"`
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Sat []OpenPeriod `json:"sat"`
	// An array of open periods. Maximum of 3 periods. Blank indicates store close.
	Sun []OpenPeriod `json:"sun"`
	AdditionalProperties map[string]interface{}
}

type _StoreHour StoreHour

// NewStoreHour instantiates a new StoreHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreHour(mon []OpenPeriod, tue []OpenPeriod, wed []OpenPeriod, thu []OpenPeriod, fri []OpenPeriod, sat []OpenPeriod, sun []OpenPeriod) *StoreHour {
	this := StoreHour{}
	this.Mon = mon
	this.Tue = tue
	this.Wed = wed
	this.Thu = thu
	this.Fri = fri
	this.Sat = sat
	this.Sun = sun
	return &this
}

// NewStoreHourWithDefaults instantiates a new StoreHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreHourWithDefaults() *StoreHour {
	this := StoreHour{}
	return &this
}

// GetMon returns the Mon field value
func (o *StoreHour) GetMon() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Mon
}

// GetMonOk returns a tuple with the Mon field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetMonOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mon, true
}

// SetMon sets field value
func (o *StoreHour) SetMon(v []OpenPeriod) {
	o.Mon = v
}

// GetTue returns the Tue field value
func (o *StoreHour) GetTue() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Tue
}

// GetTueOk returns a tuple with the Tue field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetTueOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tue, true
}

// SetTue sets field value
func (o *StoreHour) SetTue(v []OpenPeriod) {
	o.Tue = v
}

// GetWed returns the Wed field value
func (o *StoreHour) GetWed() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Wed
}

// GetWedOk returns a tuple with the Wed field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetWedOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wed, true
}

// SetWed sets field value
func (o *StoreHour) SetWed(v []OpenPeriod) {
	o.Wed = v
}

// GetThu returns the Thu field value
func (o *StoreHour) GetThu() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Thu
}

// GetThuOk returns a tuple with the Thu field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetThuOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thu, true
}

// SetThu sets field value
func (o *StoreHour) SetThu(v []OpenPeriod) {
	o.Thu = v
}

// GetFri returns the Fri field value
func (o *StoreHour) GetFri() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Fri
}

// GetFriOk returns a tuple with the Fri field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetFriOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fri, true
}

// SetFri sets field value
func (o *StoreHour) SetFri(v []OpenPeriod) {
	o.Fri = v
}

// GetSat returns the Sat field value
func (o *StoreHour) GetSat() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Sat
}

// GetSatOk returns a tuple with the Sat field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetSatOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sat, true
}

// SetSat sets field value
func (o *StoreHour) SetSat(v []OpenPeriod) {
	o.Sat = v
}

// GetSun returns the Sun field value
func (o *StoreHour) GetSun() []OpenPeriod {
	if o == nil {
		var ret []OpenPeriod
		return ret
	}

	return o.Sun
}

// GetSunOk returns a tuple with the Sun field value
// and a boolean to check if the value has been set.
func (o *StoreHour) GetSunOk() ([]OpenPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sun, true
}

// SetSun sets field value
func (o *StoreHour) SetSun(v []OpenPeriod) {
	o.Sun = v
}

func (o StoreHour) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreHour) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mon"] = o.Mon
	toSerialize["tue"] = o.Tue
	toSerialize["wed"] = o.Wed
	toSerialize["thu"] = o.Thu
	toSerialize["fri"] = o.Fri
	toSerialize["sat"] = o.Sat
	toSerialize["sun"] = o.Sun

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoreHour) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mon",
		"tue",
		"wed",
		"thu",
		"fri",
		"sat",
		"sun",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreHour := _StoreHour{}

	err = json.Unmarshal(data, &varStoreHour)

	if err != nil {
		return err
	}

	*o = StoreHour(varStoreHour)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mon")
		delete(additionalProperties, "tue")
		delete(additionalProperties, "wed")
		delete(additionalProperties, "thu")
		delete(additionalProperties, "fri")
		delete(additionalProperties, "sat")
		delete(additionalProperties, "sun")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreHour struct {
	value *StoreHour
	isSet bool
}

func (v NullableStoreHour) Get() *StoreHour {
	return v.value
}

func (v *NullableStoreHour) Set(val *StoreHour) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreHour) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreHour(val *StoreHour) *NullableStoreHour {
	return &NullableStoreHour{value: val, isSet: true}
}

func (v NullableStoreHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


