// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// CancelOrderLimitType The type of the order cancellation limit.
type CancelOrderLimitType string

// List of cancelOrderLimitType
const (
	NOT_APPROACHING_LIMIT CancelOrderLimitType = "not approaching limit"
	APPROACHING_THE_DAILY_LIMIT CancelOrderLimitType = "approaching the daily limit"
	APPROACHING_THE_WEEKLY_LIMIT CancelOrderLimitType = "approaching the weekly limit"
	APPROACHING_THE_MONTHLY_LIMIT CancelOrderLimitType = "approaching the monthly limit"
	EMPTY CancelOrderLimitType = ""
)

// All allowed values of CancelOrderLimitType enum
var AllowedCancelOrderLimitTypeEnumValues = []CancelOrderLimitType{
	"not approaching limit",
	"approaching the daily limit",
	"approaching the weekly limit",
	"approaching the monthly limit",
	"",
}

func (v *CancelOrderLimitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CancelOrderLimitType(value)
	for _, existing := range AllowedCancelOrderLimitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CancelOrderLimitType", value)
}

// NewCancelOrderLimitTypeFromValue returns a pointer to a valid CancelOrderLimitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCancelOrderLimitTypeFromValue(v string) (*CancelOrderLimitType, error) {
	ev := CancelOrderLimitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CancelOrderLimitType: valid values are %v", v, AllowedCancelOrderLimitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CancelOrderLimitType) IsValid() bool {
	for _, existing := range AllowedCancelOrderLimitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cancelOrderLimitType value
func (v CancelOrderLimitType) Ptr() *CancelOrderLimitType {
	return &v
}

type NullableCancelOrderLimitType struct {
	value *CancelOrderLimitType
	isSet bool
}

func (v NullableCancelOrderLimitType) Get() *CancelOrderLimitType {
	return v.value
}

func (v *NullableCancelOrderLimitType) Set(val *CancelOrderLimitType) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelOrderLimitType) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelOrderLimitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelOrderLimitType(val *CancelOrderLimitType) *NullableCancelOrderLimitType {
	return &NullableCancelOrderLimitType{value: val, isSet: true}
}

func (v NullableCancelOrderLimitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelOrderLimitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

