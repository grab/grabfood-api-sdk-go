// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the MenuCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuCategory{}

// MenuCategory struct for MenuCategory
type MenuCategory struct {
	// The category's ID that is on the partner system. This ID should be unique with a min length of 1 and max of 64.
	Id string `json:"id"`
	// The name of the category.
	Name string `json:"name"`
	// Translation of the category name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
	NameTranslation *map[string]string `json:"nameTranslation,omitempty"`
	// The status for the category. Refer to FAQs for more details about [availableStatus](#section/Menu/What-is-availableStatus).
	AvailableStatus string `json:"availableStatus"`
	// The selling time's ID for the category. All items within the category will apply the same selling time unless there is another selling time specified for the item.
	SellingTimeID string `json:"sellingTimeID"`
	// An array of item JSON objects. Max 300 allowed per category. Refer to [Items](#items) for more information.
	Items []MenuItem `json:"items"`
	AdditionalProperties map[string]interface{}
}

type _MenuCategory MenuCategory

// NewMenuCategory instantiates a new MenuCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuCategory(id string, name string, availableStatus string, sellingTimeID string, items []MenuItem) *MenuCategory {
	this := MenuCategory{}
	this.Id = id
	this.Name = name
	this.AvailableStatus = availableStatus
	this.SellingTimeID = sellingTimeID
	this.Items = items
	return &this
}

// NewMenuCategoryWithDefaults instantiates a new MenuCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuCategoryWithDefaults() *MenuCategory {
	this := MenuCategory{}
	return &this
}

// GetId returns the Id field value
func (o *MenuCategory) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MenuCategory) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MenuCategory) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MenuCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MenuCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MenuCategory) SetName(v string) {
	o.Name = v
}

// GetNameTranslation returns the NameTranslation field value if set, zero value otherwise.
func (o *MenuCategory) GetNameTranslation() map[string]string {
	if o == nil || IsNil(o.NameTranslation) {
		var ret map[string]string
		return ret
	}
	return *o.NameTranslation
}

// GetNameTranslationOk returns a tuple with the NameTranslation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuCategory) GetNameTranslationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.NameTranslation) {
		return nil, false
	}
	return o.NameTranslation, true
}

// HasNameTranslation returns a boolean if a field has been set.
func (o *MenuCategory) HasNameTranslation() bool {
	if o != nil && !IsNil(o.NameTranslation) {
		return true
	}

	return false
}

// SetNameTranslation gets a reference to the given map[string]string and assigns it to the NameTranslation field.
func (o *MenuCategory) SetNameTranslation(v map[string]string) {
	o.NameTranslation = &v
}

// GetAvailableStatus returns the AvailableStatus field value
func (o *MenuCategory) GetAvailableStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailableStatus
}

// GetAvailableStatusOk returns a tuple with the AvailableStatus field value
// and a boolean to check if the value has been set.
func (o *MenuCategory) GetAvailableStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableStatus, true
}

// SetAvailableStatus sets field value
func (o *MenuCategory) SetAvailableStatus(v string) {
	o.AvailableStatus = v
}

// GetSellingTimeID returns the SellingTimeID field value
func (o *MenuCategory) GetSellingTimeID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SellingTimeID
}

// GetSellingTimeIDOk returns a tuple with the SellingTimeID field value
// and a boolean to check if the value has been set.
func (o *MenuCategory) GetSellingTimeIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellingTimeID, true
}

// SetSellingTimeID sets field value
func (o *MenuCategory) SetSellingTimeID(v string) {
	o.SellingTimeID = v
}

// GetItems returns the Items field value
func (o *MenuCategory) GetItems() []MenuItem {
	if o == nil {
		var ret []MenuItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *MenuCategory) GetItemsOk() ([]MenuItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *MenuCategory) SetItems(v []MenuItem) {
	o.Items = v
}

func (o MenuCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.NameTranslation) {
		toSerialize["nameTranslation"] = o.NameTranslation
	}
	toSerialize["availableStatus"] = o.AvailableStatus
	toSerialize["sellingTimeID"] = o.SellingTimeID
	toSerialize["items"] = o.Items

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"availableStatus",
		"sellingTimeID",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuCategory := _MenuCategory{}

	err = json.Unmarshal(data, &varMenuCategory)

	if err != nil {
		return err
	}

	*o = MenuCategory(varMenuCategory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nameTranslation")
		delete(additionalProperties, "availableStatus")
		delete(additionalProperties, "sellingTimeID")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuCategory struct {
	value *MenuCategory
	isSet bool
}

func (v NullableMenuCategory) Get() *MenuCategory {
	return v.value
}

func (v *NullableMenuCategory) Set(val *MenuCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuCategory(val *MenuCategory) *NullableMenuCategory {
	return &NullableMenuCategory{value: val, isSet: true}
}

func (v NullableMenuCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


