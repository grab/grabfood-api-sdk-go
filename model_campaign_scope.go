// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the CampaignScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignScope{}

// CampaignScope The scope level for a particular campaign.
type CampaignScope struct {
	// The scope type for this campaign.  * `order` - order level campaign. * `items` - item level campaign or bundle offer.  * `category` - category level campaign where all items within applies the same discount. 
	Type string `json:"type"`
	// The list of item IDs in the partner's database applicable for discount when `discount.scope.type` is `items` (or category IDs for `category`).  One and only 1 item supported when `discount.type` is: - `freeItem` - `bundleSameNet` - `bundleSamePercentage` - `bundleSameFixPrice`  Minimum 2 - Maximum 20 items supported when `discount.type` is: - `bundleDiffNet` - `bundleDiffPercentage` - `bundleDiffFixPrice` 
	ObjectIDs []string `json:"objectIDs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CampaignScope CampaignScope

// NewCampaignScope instantiates a new CampaignScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignScope(type_ string) *CampaignScope {
	this := CampaignScope{}
	this.Type = type_
	return &this
}

// NewCampaignScopeWithDefaults instantiates a new CampaignScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignScopeWithDefaults() *CampaignScope {
	this := CampaignScope{}
	return &this
}

// GetType returns the Type field value
func (o *CampaignScope) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CampaignScope) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CampaignScope) SetType(v string) {
	o.Type = v
}

// GetObjectIDs returns the ObjectIDs field value if set, zero value otherwise.
func (o *CampaignScope) GetObjectIDs() []string {
	if o == nil || IsNil(o.ObjectIDs) {
		var ret []string
		return ret
	}
	return o.ObjectIDs
}

// GetObjectIDsOk returns a tuple with the ObjectIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignScope) GetObjectIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.ObjectIDs) {
		return nil, false
	}
	return o.ObjectIDs, true
}

// HasObjectIDs returns a boolean if a field has been set.
func (o *CampaignScope) HasObjectIDs() bool {
	if o != nil && !IsNil(o.ObjectIDs) {
		return true
	}

	return false
}

// SetObjectIDs gets a reference to the given []string and assigns it to the ObjectIDs field.
func (o *CampaignScope) SetObjectIDs(v []string) {
	o.ObjectIDs = v
}

func (o CampaignScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ObjectIDs) {
		toSerialize["objectIDs"] = o.ObjectIDs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CampaignScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCampaignScope := _CampaignScope{}

	err = json.Unmarshal(data, &varCampaignScope)

	if err != nil {
		return err
	}

	*o = CampaignScope(varCampaignScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "objectIDs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCampaignScope struct {
	value *CampaignScope
	isSet bool
}

func (v NullableCampaignScope) Get() *CampaignScope {
	return v.value
}

func (v *NullableCampaignScope) Set(val *CampaignScope) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignScope) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignScope(val *CampaignScope) *NullableCampaignScope {
	return &NullableCampaignScope{value: val, isSet: true}
}

func (v NullableCampaignScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


