// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the OutOfStockInstruction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutOfStockInstruction{}

// OutOfStockInstruction An JSON object that indicates the instructions to be taken by the merchant when the item is out of stock.
type OutOfStockInstruction struct {
	// The short instruction message.
	Title *string `json:"title,omitempty"`
	// Type of out-of-stock instruction chosen by customer. `CONTACT` is disabled by default, kindly reach out to your integration manager if you wish to receive this instruction.
	InstructionType *string `json:"instructionType,omitempty"`
	// The preferred item's ID in the partner system. Only applicable when the instructionType is `SPECIFIC_ITEM`.
	ReplacementItemID *string `json:"replacementItemID,omitempty"`
	// The preferred item's ID in the Grab system. Only applicable when the instructionType is `SPECIFIC_ITEM`.
	ReplacementGrabItemID *string `json:"replacementGrabItemID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OutOfStockInstruction OutOfStockInstruction

// NewOutOfStockInstruction instantiates a new OutOfStockInstruction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutOfStockInstruction() *OutOfStockInstruction {
	this := OutOfStockInstruction{}
	return &this
}

// NewOutOfStockInstructionWithDefaults instantiates a new OutOfStockInstruction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutOfStockInstructionWithDefaults() *OutOfStockInstruction {
	this := OutOfStockInstruction{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *OutOfStockInstruction) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfStockInstruction) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *OutOfStockInstruction) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *OutOfStockInstruction) SetTitle(v string) {
	o.Title = &v
}

// GetInstructionType returns the InstructionType field value if set, zero value otherwise.
func (o *OutOfStockInstruction) GetInstructionType() string {
	if o == nil || IsNil(o.InstructionType) {
		var ret string
		return ret
	}
	return *o.InstructionType
}

// GetInstructionTypeOk returns a tuple with the InstructionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfStockInstruction) GetInstructionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstructionType) {
		return nil, false
	}
	return o.InstructionType, true
}

// HasInstructionType returns a boolean if a field has been set.
func (o *OutOfStockInstruction) HasInstructionType() bool {
	if o != nil && !IsNil(o.InstructionType) {
		return true
	}

	return false
}

// SetInstructionType gets a reference to the given string and assigns it to the InstructionType field.
func (o *OutOfStockInstruction) SetInstructionType(v string) {
	o.InstructionType = &v
}

// GetReplacementItemID returns the ReplacementItemID field value if set, zero value otherwise.
func (o *OutOfStockInstruction) GetReplacementItemID() string {
	if o == nil || IsNil(o.ReplacementItemID) {
		var ret string
		return ret
	}
	return *o.ReplacementItemID
}

// GetReplacementItemIDOk returns a tuple with the ReplacementItemID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfStockInstruction) GetReplacementItemIDOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacementItemID) {
		return nil, false
	}
	return o.ReplacementItemID, true
}

// HasReplacementItemID returns a boolean if a field has been set.
func (o *OutOfStockInstruction) HasReplacementItemID() bool {
	if o != nil && !IsNil(o.ReplacementItemID) {
		return true
	}

	return false
}

// SetReplacementItemID gets a reference to the given string and assigns it to the ReplacementItemID field.
func (o *OutOfStockInstruction) SetReplacementItemID(v string) {
	o.ReplacementItemID = &v
}

// GetReplacementGrabItemID returns the ReplacementGrabItemID field value if set, zero value otherwise.
func (o *OutOfStockInstruction) GetReplacementGrabItemID() string {
	if o == nil || IsNil(o.ReplacementGrabItemID) {
		var ret string
		return ret
	}
	return *o.ReplacementGrabItemID
}

// GetReplacementGrabItemIDOk returns a tuple with the ReplacementGrabItemID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfStockInstruction) GetReplacementGrabItemIDOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacementGrabItemID) {
		return nil, false
	}
	return o.ReplacementGrabItemID, true
}

// HasReplacementGrabItemID returns a boolean if a field has been set.
func (o *OutOfStockInstruction) HasReplacementGrabItemID() bool {
	if o != nil && !IsNil(o.ReplacementGrabItemID) {
		return true
	}

	return false
}

// SetReplacementGrabItemID gets a reference to the given string and assigns it to the ReplacementGrabItemID field.
func (o *OutOfStockInstruction) SetReplacementGrabItemID(v string) {
	o.ReplacementGrabItemID = &v
}

func (o OutOfStockInstruction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutOfStockInstruction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.InstructionType) {
		toSerialize["instructionType"] = o.InstructionType
	}
	if !IsNil(o.ReplacementItemID) {
		toSerialize["replacementItemID"] = o.ReplacementItemID
	}
	if !IsNil(o.ReplacementGrabItemID) {
		toSerialize["replacementGrabItemID"] = o.ReplacementGrabItemID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OutOfStockInstruction) UnmarshalJSON(data []byte) (err error) {
	varOutOfStockInstruction := _OutOfStockInstruction{}

	err = json.Unmarshal(data, &varOutOfStockInstruction)

	if err != nil {
		return err
	}

	*o = OutOfStockInstruction(varOutOfStockInstruction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "instructionType")
		delete(additionalProperties, "replacementItemID")
		delete(additionalProperties, "replacementGrabItemID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutOfStockInstruction struct {
	value *OutOfStockInstruction
	isSet bool
}

func (v NullableOutOfStockInstruction) Get() *OutOfStockInstruction {
	return v.value
}

func (v *NullableOutOfStockInstruction) Set(val *OutOfStockInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableOutOfStockInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableOutOfStockInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutOfStockInstruction(val *OutOfStockInstruction) *NullableOutOfStockInstruction {
	return &NullableOutOfStockInstruction{value: val, isSet: true}
}

func (v NullableOutOfStockInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutOfStockInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


