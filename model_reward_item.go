// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the RewardItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RewardItem{}

// RewardItem struct for RewardItem
type RewardItem struct {
	// The item's ID in partner system.
	ItemID *string `json:"itemID,omitempty"`
	// The item's quantity.
	Quantity *int32 `json:"quantity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RewardItem RewardItem

// NewRewardItem instantiates a new RewardItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewardItem() *RewardItem {
	this := RewardItem{}
	return &this
}

// NewRewardItemWithDefaults instantiates a new RewardItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardItemWithDefaults() *RewardItem {
	this := RewardItem{}
	return &this
}

// GetItemID returns the ItemID field value if set, zero value otherwise.
func (o *RewardItem) GetItemID() string {
	if o == nil || IsNil(o.ItemID) {
		var ret string
		return ret
	}
	return *o.ItemID
}

// GetItemIDOk returns a tuple with the ItemID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardItem) GetItemIDOk() (*string, bool) {
	if o == nil || IsNil(o.ItemID) {
		return nil, false
	}
	return o.ItemID, true
}

// HasItemID returns a boolean if a field has been set.
func (o *RewardItem) HasItemID() bool {
	if o != nil && !IsNil(o.ItemID) {
		return true
	}

	return false
}

// SetItemID gets a reference to the given string and assigns it to the ItemID field.
func (o *RewardItem) SetItemID(v string) {
	o.ItemID = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *RewardItem) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardItem) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *RewardItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *RewardItem) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o RewardItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RewardItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemID) {
		toSerialize["itemID"] = o.ItemID
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RewardItem) UnmarshalJSON(data []byte) (err error) {
	varRewardItem := _RewardItem{}

	err = json.Unmarshal(data, &varRewardItem)

	if err != nil {
		return err
	}

	*o = RewardItem(varRewardItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "itemID")
		delete(additionalProperties, "quantity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRewardItem struct {
	value *RewardItem
	isSet bool
}

func (v NullableRewardItem) Get() *RewardItem {
	return v.value
}

func (v *NullableRewardItem) Set(val *RewardItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardItem(val *RewardItem) *NullableRewardItem {
	return &NullableRewardItem{value: val, isSet: true}
}

func (v NullableRewardItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


