// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the OrderFreeItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderFreeItem{}

// OrderFreeItem Free item information for `freeItem` campaign.
type OrderFreeItem struct {
	// The item's ID
	Id *string `json:"id,omitempty"`
	// The name of the item. 
	Name *string `json:"name,omitempty"`
	// The item's quantity. Maximum is **1**.
	Quantity *int32 `json:"quantity,omitempty"`
	// The item's price in minor unit format.
	Price *int64 `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderFreeItem OrderFreeItem

// NewOrderFreeItem instantiates a new OrderFreeItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderFreeItem() *OrderFreeItem {
	this := OrderFreeItem{}
	return &this
}

// NewOrderFreeItemWithDefaults instantiates a new OrderFreeItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderFreeItemWithDefaults() *OrderFreeItem {
	this := OrderFreeItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderFreeItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderFreeItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderFreeItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderFreeItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrderFreeItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderFreeItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrderFreeItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrderFreeItem) SetName(v string) {
	o.Name = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderFreeItem) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderFreeItem) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderFreeItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *OrderFreeItem) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderFreeItem) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderFreeItem) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderFreeItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *OrderFreeItem) SetPrice(v int64) {
	o.Price = &v
}

func (o OrderFreeItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderFreeItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderFreeItem) UnmarshalJSON(data []byte) (err error) {
	varOrderFreeItem := _OrderFreeItem{}

	err = json.Unmarshal(data, &varOrderFreeItem)

	if err != nil {
		return err
	}

	*o = OrderFreeItem(varOrderFreeItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderFreeItem struct {
	value *OrderFreeItem
	isSet bool
}

func (v NullableOrderFreeItem) Get() *OrderFreeItem {
	return v.value
}

func (v *NullableOrderFreeItem) Set(val *OrderFreeItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderFreeItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderFreeItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderFreeItem(val *OrderFreeItem) *NullableOrderFreeItem {
	return &NullableOrderFreeItem{value: val, isSet: true}
}

func (v NullableOrderFreeItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderFreeItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


