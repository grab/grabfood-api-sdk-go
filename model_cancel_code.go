// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// CancelCode The cancel code for a specific cancel reason.
type CancelCode int32

// List of cancelCode
const (
	_1001 CancelCode = 1001
	_1002 CancelCode = 1002
	_1003 CancelCode = 1003
	_1004 CancelCode = 1004
)

// All allowed values of CancelCode enum
var AllowedCancelCodeEnumValues = []CancelCode{
	1001,
	1002,
	1003,
	1004,
}

func (v *CancelCode) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CancelCode(value)
	for _, existing := range AllowedCancelCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CancelCode", value)
}

// NewCancelCodeFromValue returns a pointer to a valid CancelCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCancelCodeFromValue(v int32) (*CancelCode, error) {
	ev := CancelCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CancelCode: valid values are %v", v, AllowedCancelCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CancelCode) IsValid() bool {
	for _, existing := range AllowedCancelCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cancelCode value
func (v CancelCode) Ptr() *CancelCode {
	return &v
}

type NullableCancelCode struct {
	value *CancelCode
	isSet bool
}

func (v NullableCancelCode) Get() *CancelCode {
	return v.value
}

func (v *NullableCancelCode) Set(val *CancelCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelCode(val *CancelCode) *NullableCancelCode {
	return &NullableCancelCode{value: val, isSet: true}
}

func (v NullableCancelCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

