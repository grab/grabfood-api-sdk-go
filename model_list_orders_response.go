// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the ListOrdersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrdersResponse{}

// ListOrdersResponse 
type ListOrdersResponse struct {
	// The boolean value to indicate if there is more order data. If `true`, you can continue requesting with page+1.
	More *bool `json:"more,omitempty"`
	Orders []Order `json:"orders,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListOrdersResponse ListOrdersResponse

// NewListOrdersResponse instantiates a new ListOrdersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrdersResponse() *ListOrdersResponse {
	this := ListOrdersResponse{}
	return &this
}

// NewListOrdersResponseWithDefaults instantiates a new ListOrdersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrdersResponseWithDefaults() *ListOrdersResponse {
	this := ListOrdersResponse{}
	return &this
}

// GetMore returns the More field value if set, zero value otherwise.
func (o *ListOrdersResponse) GetMore() bool {
	if o == nil || IsNil(o.More) {
		var ret bool
		return ret
	}
	return *o.More
}

// GetMoreOk returns a tuple with the More field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOrdersResponse) GetMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.More) {
		return nil, false
	}
	return o.More, true
}

// HasMore returns a boolean if a field has been set.
func (o *ListOrdersResponse) HasMore() bool {
	if o != nil && !IsNil(o.More) {
		return true
	}

	return false
}

// SetMore gets a reference to the given bool and assigns it to the More field.
func (o *ListOrdersResponse) SetMore(v bool) {
	o.More = &v
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *ListOrdersResponse) GetOrders() []Order {
	if o == nil || IsNil(o.Orders) {
		var ret []Order
		return ret
	}
	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOrdersResponse) GetOrdersOk() ([]Order, bool) {
	if o == nil || IsNil(o.Orders) {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *ListOrdersResponse) HasOrders() bool {
	if o != nil && !IsNil(o.Orders) {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []Order and assigns it to the Orders field.
func (o *ListOrdersResponse) SetOrders(v []Order) {
	o.Orders = v
}

func (o ListOrdersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOrdersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.More) {
		toSerialize["more"] = o.More
	}
	if !IsNil(o.Orders) {
		toSerialize["orders"] = o.Orders
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListOrdersResponse) UnmarshalJSON(data []byte) (err error) {
	varListOrdersResponse := _ListOrdersResponse{}

	err = json.Unmarshal(data, &varListOrdersResponse)

	if err != nil {
		return err
	}

	*o = ListOrdersResponse(varListOrdersResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "more")
		delete(additionalProperties, "orders")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListOrdersResponse struct {
	value *ListOrdersResponse
	isSet bool
}

func (v NullableListOrdersResponse) Get() *ListOrdersResponse {
	return v.value
}

func (v *NullableListOrdersResponse) Set(val *ListOrdersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrdersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrdersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrdersResponse(val *ListOrdersResponse) *NullableListOrdersResponse {
	return &NullableListOrdersResponse{value: val, isSet: true}
}

func (v NullableListOrdersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrdersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


