// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the ModifierGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifierGroup{}

// ModifierGroup struct for ModifierGroup
type ModifierGroup struct {
	// The ModifierGroup's ID that is on the partner system. This ID should be unique with a min length of 1 and max of 64.
	Id string `json:"id"`
	// The name of the ModifierGroup for the item that is in the parent category and section.
	Name string `json:"name"`
	// Translation of the modifier group name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
	NameTranslation *map[string]string `json:"nameTranslation,omitempty"`
	// The status for the ModifierGroup that is in the item.
	AvailableStatus string `json:"availableStatus"`
	// The minimum quantity of the attribute. Refer to FAQs for more details about [selection range](#section/Menu/What-does-the-selection-range-do).
	SelectionRangeMin *int32 `json:"selectionRangeMin,omitempty"`
	// The maximum quantity of the attribute. Refer to FAQs for more details about [selection range](#section/Menu/What-does-the-selection-range-do).
	SelectionRangeMax int32 `json:"selectionRangeMax"`
	// An array of modifier JSON objects. Max 100 per modifierGroup. Refer to [Modifiers](#modifiers) for more information.
	Modifiers []MenuModifier `json:"modifiers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModifierGroup ModifierGroup

// NewModifierGroup instantiates a new ModifierGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifierGroup(id string, name string, availableStatus string, selectionRangeMax int32) *ModifierGroup {
	this := ModifierGroup{}
	this.Id = id
	this.Name = name
	this.AvailableStatus = availableStatus
	this.SelectionRangeMax = selectionRangeMax
	return &this
}

// NewModifierGroupWithDefaults instantiates a new ModifierGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifierGroupWithDefaults() *ModifierGroup {
	this := ModifierGroup{}
	return &this
}

// GetId returns the Id field value
func (o *ModifierGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModifierGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ModifierGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModifierGroup) SetName(v string) {
	o.Name = v
}

// GetNameTranslation returns the NameTranslation field value if set, zero value otherwise.
func (o *ModifierGroup) GetNameTranslation() map[string]string {
	if o == nil || IsNil(o.NameTranslation) {
		var ret map[string]string
		return ret
	}
	return *o.NameTranslation
}

// GetNameTranslationOk returns a tuple with the NameTranslation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetNameTranslationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.NameTranslation) {
		return nil, false
	}
	return o.NameTranslation, true
}

// HasNameTranslation returns a boolean if a field has been set.
func (o *ModifierGroup) HasNameTranslation() bool {
	if o != nil && !IsNil(o.NameTranslation) {
		return true
	}

	return false
}

// SetNameTranslation gets a reference to the given map[string]string and assigns it to the NameTranslation field.
func (o *ModifierGroup) SetNameTranslation(v map[string]string) {
	o.NameTranslation = &v
}

// GetAvailableStatus returns the AvailableStatus field value
func (o *ModifierGroup) GetAvailableStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailableStatus
}

// GetAvailableStatusOk returns a tuple with the AvailableStatus field value
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetAvailableStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableStatus, true
}

// SetAvailableStatus sets field value
func (o *ModifierGroup) SetAvailableStatus(v string) {
	o.AvailableStatus = v
}

// GetSelectionRangeMin returns the SelectionRangeMin field value if set, zero value otherwise.
func (o *ModifierGroup) GetSelectionRangeMin() int32 {
	if o == nil || IsNil(o.SelectionRangeMin) {
		var ret int32
		return ret
	}
	return *o.SelectionRangeMin
}

// GetSelectionRangeMinOk returns a tuple with the SelectionRangeMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetSelectionRangeMinOk() (*int32, bool) {
	if o == nil || IsNil(o.SelectionRangeMin) {
		return nil, false
	}
	return o.SelectionRangeMin, true
}

// HasSelectionRangeMin returns a boolean if a field has been set.
func (o *ModifierGroup) HasSelectionRangeMin() bool {
	if o != nil && !IsNil(o.SelectionRangeMin) {
		return true
	}

	return false
}

// SetSelectionRangeMin gets a reference to the given int32 and assigns it to the SelectionRangeMin field.
func (o *ModifierGroup) SetSelectionRangeMin(v int32) {
	o.SelectionRangeMin = &v
}

// GetSelectionRangeMax returns the SelectionRangeMax field value
func (o *ModifierGroup) GetSelectionRangeMax() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SelectionRangeMax
}

// GetSelectionRangeMaxOk returns a tuple with the SelectionRangeMax field value
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetSelectionRangeMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectionRangeMax, true
}

// SetSelectionRangeMax sets field value
func (o *ModifierGroup) SetSelectionRangeMax(v int32) {
	o.SelectionRangeMax = v
}

// GetModifiers returns the Modifiers field value if set, zero value otherwise.
func (o *ModifierGroup) GetModifiers() []MenuModifier {
	if o == nil || IsNil(o.Modifiers) {
		var ret []MenuModifier
		return ret
	}
	return o.Modifiers
}

// GetModifiersOk returns a tuple with the Modifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifierGroup) GetModifiersOk() ([]MenuModifier, bool) {
	if o == nil || IsNil(o.Modifiers) {
		return nil, false
	}
	return o.Modifiers, true
}

// HasModifiers returns a boolean if a field has been set.
func (o *ModifierGroup) HasModifiers() bool {
	if o != nil && !IsNil(o.Modifiers) {
		return true
	}

	return false
}

// SetModifiers gets a reference to the given []MenuModifier and assigns it to the Modifiers field.
func (o *ModifierGroup) SetModifiers(v []MenuModifier) {
	o.Modifiers = v
}

func (o ModifierGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifierGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.NameTranslation) {
		toSerialize["nameTranslation"] = o.NameTranslation
	}
	toSerialize["availableStatus"] = o.AvailableStatus
	if !IsNil(o.SelectionRangeMin) {
		toSerialize["selectionRangeMin"] = o.SelectionRangeMin
	}
	toSerialize["selectionRangeMax"] = o.SelectionRangeMax
	if !IsNil(o.Modifiers) {
		toSerialize["modifiers"] = o.Modifiers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModifierGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"availableStatus",
		"selectionRangeMax",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifierGroup := _ModifierGroup{}

	err = json.Unmarshal(data, &varModifierGroup)

	if err != nil {
		return err
	}

	*o = ModifierGroup(varModifierGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nameTranslation")
		delete(additionalProperties, "availableStatus")
		delete(additionalProperties, "selectionRangeMin")
		delete(additionalProperties, "selectionRangeMax")
		delete(additionalProperties, "modifiers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModifierGroup struct {
	value *ModifierGroup
	isSet bool
}

func (v NullableModifierGroup) Get() *ModifierGroup {
	return v.value
}

func (v *NullableModifierGroup) Set(val *ModifierGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableModifierGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableModifierGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifierGroup(val *ModifierGroup) *NullableModifierGroup {
	return &NullableModifierGroup{value: val, isSet: true}
}

func (v NullableModifierGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifierGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


