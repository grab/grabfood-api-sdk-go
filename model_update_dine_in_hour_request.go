// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateDineInHourRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDineInHourRequest{}

// UpdateDineInHourRequest Object contains store dine-in hours.
type UpdateDineInHourRequest struct {
	DineInHour StoreHour `json:"dineInHour"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDineInHourRequest UpdateDineInHourRequest

// NewUpdateDineInHourRequest instantiates a new UpdateDineInHourRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDineInHourRequest(dineInHour StoreHour) *UpdateDineInHourRequest {
	this := UpdateDineInHourRequest{}
	this.DineInHour = dineInHour
	return &this
}

// NewUpdateDineInHourRequestWithDefaults instantiates a new UpdateDineInHourRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDineInHourRequestWithDefaults() *UpdateDineInHourRequest {
	this := UpdateDineInHourRequest{}
	return &this
}

// GetDineInHour returns the DineInHour field value
func (o *UpdateDineInHourRequest) GetDineInHour() StoreHour {
	if o == nil {
		var ret StoreHour
		return ret
	}

	return o.DineInHour
}

// GetDineInHourOk returns a tuple with the DineInHour field value
// and a boolean to check if the value has been set.
func (o *UpdateDineInHourRequest) GetDineInHourOk() (*StoreHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DineInHour, true
}

// SetDineInHour sets field value
func (o *UpdateDineInHourRequest) SetDineInHour(v StoreHour) {
	o.DineInHour = v
}

func (o UpdateDineInHourRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDineInHourRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dineInHour"] = o.DineInHour

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDineInHourRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dineInHour",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDineInHourRequest := _UpdateDineInHourRequest{}

	err = json.Unmarshal(data, &varUpdateDineInHourRequest)

	if err != nil {
		return err
	}

	*o = UpdateDineInHourRequest(varUpdateDineInHourRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dineInHour")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDineInHourRequest struct {
	value *UpdateDineInHourRequest
	isSet bool
}

func (v NullableUpdateDineInHourRequest) Get() *UpdateDineInHourRequest {
	return v.value
}

func (v *NullableUpdateDineInHourRequest) Set(val *UpdateDineInHourRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDineInHourRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDineInHourRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDineInHourRequest(val *UpdateDineInHourRequest) *NullableUpdateDineInHourRequest {
	return &NullableUpdateDineInHourRequest{value: val, isSet: true}
}

func (v NullableUpdateDineInHourRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDineInHourRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


