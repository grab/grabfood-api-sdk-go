// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceHours type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceHours{}

// ServiceHours A JSON object with serviceHours for each day of the week.
type ServiceHours struct {
	Mon ServiceHour `json:"mon"`
	Tue ServiceHour `json:"tue"`
	Wed ServiceHour `json:"wed"`
	Thu ServiceHour `json:"thu"`
	Fri ServiceHour `json:"fri"`
	Sat ServiceHour `json:"sat"`
	Sun ServiceHour `json:"sun"`
	AdditionalProperties map[string]interface{}
}

type _ServiceHours ServiceHours

// NewServiceHours instantiates a new ServiceHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceHours(mon ServiceHour, tue ServiceHour, wed ServiceHour, thu ServiceHour, fri ServiceHour, sat ServiceHour, sun ServiceHour) *ServiceHours {
	this := ServiceHours{}
	this.Mon = mon
	this.Tue = tue
	this.Wed = wed
	this.Thu = thu
	this.Fri = fri
	this.Sat = sat
	this.Sun = sun
	return &this
}

// NewServiceHoursWithDefaults instantiates a new ServiceHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceHoursWithDefaults() *ServiceHours {
	this := ServiceHours{}
	return &this
}

// GetMon returns the Mon field value
func (o *ServiceHours) GetMon() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Mon
}

// GetMonOk returns a tuple with the Mon field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetMonOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mon, true
}

// SetMon sets field value
func (o *ServiceHours) SetMon(v ServiceHour) {
	o.Mon = v
}

// GetTue returns the Tue field value
func (o *ServiceHours) GetTue() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Tue
}

// GetTueOk returns a tuple with the Tue field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetTueOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tue, true
}

// SetTue sets field value
func (o *ServiceHours) SetTue(v ServiceHour) {
	o.Tue = v
}

// GetWed returns the Wed field value
func (o *ServiceHours) GetWed() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Wed
}

// GetWedOk returns a tuple with the Wed field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetWedOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wed, true
}

// SetWed sets field value
func (o *ServiceHours) SetWed(v ServiceHour) {
	o.Wed = v
}

// GetThu returns the Thu field value
func (o *ServiceHours) GetThu() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Thu
}

// GetThuOk returns a tuple with the Thu field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetThuOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thu, true
}

// SetThu sets field value
func (o *ServiceHours) SetThu(v ServiceHour) {
	o.Thu = v
}

// GetFri returns the Fri field value
func (o *ServiceHours) GetFri() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Fri
}

// GetFriOk returns a tuple with the Fri field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetFriOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fri, true
}

// SetFri sets field value
func (o *ServiceHours) SetFri(v ServiceHour) {
	o.Fri = v
}

// GetSat returns the Sat field value
func (o *ServiceHours) GetSat() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Sat
}

// GetSatOk returns a tuple with the Sat field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetSatOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sat, true
}

// SetSat sets field value
func (o *ServiceHours) SetSat(v ServiceHour) {
	o.Sat = v
}

// GetSun returns the Sun field value
func (o *ServiceHours) GetSun() ServiceHour {
	if o == nil {
		var ret ServiceHour
		return ret
	}

	return o.Sun
}

// GetSunOk returns a tuple with the Sun field value
// and a boolean to check if the value has been set.
func (o *ServiceHours) GetSunOk() (*ServiceHour, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sun, true
}

// SetSun sets field value
func (o *ServiceHours) SetSun(v ServiceHour) {
	o.Sun = v
}

func (o ServiceHours) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceHours) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mon"] = o.Mon
	toSerialize["tue"] = o.Tue
	toSerialize["wed"] = o.Wed
	toSerialize["thu"] = o.Thu
	toSerialize["fri"] = o.Fri
	toSerialize["sat"] = o.Sat
	toSerialize["sun"] = o.Sun

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceHours) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mon",
		"tue",
		"wed",
		"thu",
		"fri",
		"sat",
		"sun",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceHours := _ServiceHours{}

	err = json.Unmarshal(data, &varServiceHours)

	if err != nil {
		return err
	}

	*o = ServiceHours(varServiceHours)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mon")
		delete(additionalProperties, "tue")
		delete(additionalProperties, "wed")
		delete(additionalProperties, "thu")
		delete(additionalProperties, "fri")
		delete(additionalProperties, "sat")
		delete(additionalProperties, "sun")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceHours struct {
	value *ServiceHours
	isSet bool
}

func (v NullableServiceHours) Get() *ServiceHours {
	return v.value
}

func (v *NullableServiceHours) Set(val *ServiceHours) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceHours) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceHours(val *ServiceHours) *NullableServiceHours {
	return &NullableServiceHours{value: val, isSet: true}
}

func (v NullableServiceHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


