// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the PartnerOauthResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartnerOauthResponse{}

// PartnerOauthResponse struct for PartnerOauthResponse
type PartnerOauthResponse struct {
	// The OAuth 2.0 access token issued by the partner.
	AccessToken *string `json:"access_token,omitempty"`
	// The type of token issued which is case insensitive.
	TokenType *string `json:"token_type,omitempty"`
	// The access token lifespan in seconds.
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PartnerOauthResponse PartnerOauthResponse

// NewPartnerOauthResponse instantiates a new PartnerOauthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerOauthResponse() *PartnerOauthResponse {
	this := PartnerOauthResponse{}
	return &this
}

// NewPartnerOauthResponseWithDefaults instantiates a new PartnerOauthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerOauthResponseWithDefaults() *PartnerOauthResponse {
	this := PartnerOauthResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *PartnerOauthResponse) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerOauthResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *PartnerOauthResponse) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *PartnerOauthResponse) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *PartnerOauthResponse) GetTokenType() string {
	if o == nil || IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerOauthResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *PartnerOauthResponse) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *PartnerOauthResponse) SetTokenType(v string) {
	o.TokenType = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *PartnerOauthResponse) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerOauthResponse) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *PartnerOauthResponse) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *PartnerOauthResponse) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

func (o PartnerOauthResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartnerOauthResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !IsNil(o.TokenType) {
		toSerialize["token_type"] = o.TokenType
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PartnerOauthResponse) UnmarshalJSON(data []byte) (err error) {
	varPartnerOauthResponse := _PartnerOauthResponse{}

	err = json.Unmarshal(data, &varPartnerOauthResponse)

	if err != nil {
		return err
	}

	*o = PartnerOauthResponse(varPartnerOauthResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "token_type")
		delete(additionalProperties, "expires_in")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePartnerOauthResponse struct {
	value *PartnerOauthResponse
	isSet bool
}

func (v NullablePartnerOauthResponse) Get() *PartnerOauthResponse {
	return v.value
}

func (v *NullablePartnerOauthResponse) Set(val *PartnerOauthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerOauthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerOauthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerOauthResponse(val *PartnerOauthResponse) *NullablePartnerOauthResponse {
	return &NullablePartnerOauthResponse{value: val, isSet: true}
}

func (v NullablePartnerOauthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerOauthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


