// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// GetDineinVoucherAPIService GetDineinVoucherAPI service
type GetDineinVoucherAPIService service

type ApiGetDineinVoucherRequest struct {
	ctx context.Context
	ApiService *GetDineinVoucherAPIService
	authorization *string
	merchantID *string
	voucherCode *string
	certificateID *string
}

// Specify the generated authorization token of the bearer type.
func (r ApiGetDineinVoucherRequest) Authorization(authorization string) ApiGetDineinVoucherRequest {
	r.authorization = &authorization
	return r
}

func (r ApiGetDineinVoucherRequest) MerchantID(merchantID string) ApiGetDineinVoucherRequest {
	r.merchantID = &merchantID
	return r
}

// A short code for the dine-in voucher purchased by the user. Required if &#x60;certificateID&#x60; is not specified.
func (r ApiGetDineinVoucherRequest) VoucherCode(voucherCode string) ApiGetDineinVoucherRequest {
	r.voucherCode = &voucherCode
	return r
}

// This certificateID is decoded from scanning the QR code, and 1:1 mapping with voucherCode. Required if &#x60;voucherCode&#x60; is not specified.
func (r ApiGetDineinVoucherRequest) CertificateID(certificateID string) ApiGetDineinVoucherRequest {
	r.certificateID = &certificateID
	return r
}

func (r ApiGetDineinVoucherRequest) Execute() (*GetDineInVoucherResponse, *http.Response, error) {
	return r.ApiService.GetDineinVoucherExecute(r)
}

/*
GetDineinVoucher Get Dine In Voucher

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDineinVoucherRequest
*/
func (a *GetDineinVoucherAPIService) GetDineinVoucher(ctx context.Context) ApiGetDineinVoucherRequest {
	return ApiGetDineinVoucherRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDineInVoucherResponse
func (a *GetDineinVoucherAPIService) GetDineinVoucherExecute(r ApiGetDineinVoucherRequest) (*GetDineInVoucherResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDineInVoucherResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GetDineinVoucherAPIService.GetDineinVoucher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/partner/v1/dinein/voucher"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.merchantID == nil {
		return localVarReturnValue, nil, reportError("merchantID is required and must be specified")
	}

	if r.voucherCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voucherCode", r.voucherCode, "form", "")
	}
	if r.certificateID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "certificateID", r.certificateID, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "merchantID", r.merchantID, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
