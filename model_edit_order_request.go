// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the EditOrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditOrderRequest{}

// EditOrderRequest Information about editing an existing order on GrabFood. 
type EditOrderRequest struct {
	// The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
	OrderID string `json:"orderID"`
	// Specify the array of all items in the order, including deleted, added, updated and unchanged items.
	Items []EditOrderItem `json:"items"`
	// This parameter specifies whether to recalculate the edited order without submitting it. It is intended for testing purposes only. This parameter is set to false by default, which means the edited order will be recalculated and re-submitted to partners. 
	OnlyRecalculate *bool `json:"onlyRecalculate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EditOrderRequest EditOrderRequest

// NewEditOrderRequest instantiates a new EditOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditOrderRequest(orderID string, items []EditOrderItem) *EditOrderRequest {
	this := EditOrderRequest{}
	this.OrderID = orderID
	this.Items = items
	return &this
}

// NewEditOrderRequestWithDefaults instantiates a new EditOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditOrderRequestWithDefaults() *EditOrderRequest {
	this := EditOrderRequest{}
	return &this
}

// GetOrderID returns the OrderID field value
func (o *EditOrderRequest) GetOrderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value
// and a boolean to check if the value has been set.
func (o *EditOrderRequest) GetOrderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderID, true
}

// SetOrderID sets field value
func (o *EditOrderRequest) SetOrderID(v string) {
	o.OrderID = v
}

// GetItems returns the Items field value
func (o *EditOrderRequest) GetItems() []EditOrderItem {
	if o == nil {
		var ret []EditOrderItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *EditOrderRequest) GetItemsOk() ([]EditOrderItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *EditOrderRequest) SetItems(v []EditOrderItem) {
	o.Items = v
}

// GetOnlyRecalculate returns the OnlyRecalculate field value if set, zero value otherwise.
func (o *EditOrderRequest) GetOnlyRecalculate() bool {
	if o == nil || IsNil(o.OnlyRecalculate) {
		var ret bool
		return ret
	}
	return *o.OnlyRecalculate
}

// GetOnlyRecalculateOk returns a tuple with the OnlyRecalculate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrderRequest) GetOnlyRecalculateOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyRecalculate) {
		return nil, false
	}
	return o.OnlyRecalculate, true
}

// HasOnlyRecalculate returns a boolean if a field has been set.
func (o *EditOrderRequest) HasOnlyRecalculate() bool {
	if o != nil && !IsNil(o.OnlyRecalculate) {
		return true
	}

	return false
}

// SetOnlyRecalculate gets a reference to the given bool and assigns it to the OnlyRecalculate field.
func (o *EditOrderRequest) SetOnlyRecalculate(v bool) {
	o.OnlyRecalculate = &v
}

func (o EditOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orderID"] = o.OrderID
	toSerialize["items"] = o.Items
	if !IsNil(o.OnlyRecalculate) {
		toSerialize["onlyRecalculate"] = o.OnlyRecalculate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditOrderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderID",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditOrderRequest := _EditOrderRequest{}

	err = json.Unmarshal(data, &varEditOrderRequest)

	if err != nil {
		return err
	}

	*o = EditOrderRequest(varEditOrderRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "orderID")
		delete(additionalProperties, "items")
		delete(additionalProperties, "onlyRecalculate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditOrderRequest struct {
	value *EditOrderRequest
	isSet bool
}

func (v NullableEditOrderRequest) Get() *EditOrderRequest {
	return v.value
}

func (v *NullableEditOrderRequest) Set(val *EditOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditOrderRequest(val *EditOrderRequest) *NullableEditOrderRequest {
	return &NullableEditOrderRequest{value: val, isSet: true}
}

func (v NullableEditOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


