// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the PauseStoreRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PauseStoreRequest{}

// PauseStoreRequest This request pauses a store temporarily for (30 minutes/1 hour/24 hours) or unpauses a store on GrabFood. 
type PauseStoreRequest struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID string `json:"merchantID"`
	// Boolean value to pause or unpause store.
	IsPause bool `json:"isPause"`
	// The duration to pause the store. Only required when `isPause=true`.
	Duration *string `json:"duration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PauseStoreRequest PauseStoreRequest

// NewPauseStoreRequest instantiates a new PauseStoreRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPauseStoreRequest(merchantID string, isPause bool) *PauseStoreRequest {
	this := PauseStoreRequest{}
	this.MerchantID = merchantID
	this.IsPause = isPause
	return &this
}

// NewPauseStoreRequestWithDefaults instantiates a new PauseStoreRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPauseStoreRequestWithDefaults() *PauseStoreRequest {
	this := PauseStoreRequest{}
	return &this
}

// GetMerchantID returns the MerchantID field value
func (o *PauseStoreRequest) GetMerchantID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value
// and a boolean to check if the value has been set.
func (o *PauseStoreRequest) GetMerchantIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantID, true
}

// SetMerchantID sets field value
func (o *PauseStoreRequest) SetMerchantID(v string) {
	o.MerchantID = v
}

// GetIsPause returns the IsPause field value
func (o *PauseStoreRequest) GetIsPause() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPause
}

// GetIsPauseOk returns a tuple with the IsPause field value
// and a boolean to check if the value has been set.
func (o *PauseStoreRequest) GetIsPauseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPause, true
}

// SetIsPause sets field value
func (o *PauseStoreRequest) SetIsPause(v bool) {
	o.IsPause = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *PauseStoreRequest) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PauseStoreRequest) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *PauseStoreRequest) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *PauseStoreRequest) SetDuration(v string) {
	o.Duration = &v
}

func (o PauseStoreRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PauseStoreRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantID"] = o.MerchantID
	toSerialize["isPause"] = o.IsPause
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PauseStoreRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantID",
		"isPause",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPauseStoreRequest := _PauseStoreRequest{}

	err = json.Unmarshal(data, &varPauseStoreRequest)

	if err != nil {
		return err
	}

	*o = PauseStoreRequest(varPauseStoreRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "isPause")
		delete(additionalProperties, "duration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePauseStoreRequest struct {
	value *PauseStoreRequest
	isSet bool
}

func (v NullablePauseStoreRequest) Get() *PauseStoreRequest {
	return v.value
}

func (v *NullablePauseStoreRequest) Set(val *PauseStoreRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePauseStoreRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePauseStoreRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePauseStoreRequest(val *PauseStoreRequest) *NullablePauseStoreRequest {
	return &NullablePauseStoreRequest{value: val, isSet: true}
}

func (v NullablePauseStoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePauseStoreRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


