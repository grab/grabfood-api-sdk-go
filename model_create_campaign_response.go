// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the CreateCampaignResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCampaignResponse{}

// CreateCampaignResponse 
type CreateCampaignResponse struct {
	// The campaign's ID.
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateCampaignResponse CreateCampaignResponse

// NewCreateCampaignResponse instantiates a new CreateCampaignResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCampaignResponse() *CreateCampaignResponse {
	this := CreateCampaignResponse{}
	return &this
}

// NewCreateCampaignResponseWithDefaults instantiates a new CreateCampaignResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCampaignResponseWithDefaults() *CreateCampaignResponse {
	this := CreateCampaignResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateCampaignResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCampaignResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateCampaignResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateCampaignResponse) SetId(v string) {
	o.Id = &v
}

func (o CreateCampaignResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCampaignResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateCampaignResponse) UnmarshalJSON(data []byte) (err error) {
	varCreateCampaignResponse := _CreateCampaignResponse{}

	err = json.Unmarshal(data, &varCreateCampaignResponse)

	if err != nil {
		return err
	}

	*o = CreateCampaignResponse(varCreateCampaignResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateCampaignResponse struct {
	value *CreateCampaignResponse
	isSet bool
}

func (v NullableCreateCampaignResponse) Get() *CreateCampaignResponse {
	return v.value
}

func (v *NullableCreateCampaignResponse) Set(val *CreateCampaignResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCampaignResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCampaignResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCampaignResponse(val *CreateCampaignResponse) *NullableCreateCampaignResponse {
	return &NullableCreateCampaignResponse{value: val, isSet: true}
}

func (v NullableCreateCampaignResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCampaignResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


