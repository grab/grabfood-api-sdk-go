// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the GetRewardNativeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRewardNativeRequest{}

// GetRewardNativeRequest This request submits membership detail and order value to get reward calculation. 
type GetRewardNativeRequest struct {
	// The unique member ID on the partner's database.
	MemberID *string `json:"memberID,omitempty"`
	// Grab merchant's ID.
	MerchantID *string `json:"merchantID,omitempty"`
	Items []RewardItem `json:"items,omitempty"`
	// The post-discount order value.
	OrderValue *int64 `json:"orderValue,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetRewardNativeRequest GetRewardNativeRequest

// NewGetRewardNativeRequest instantiates a new GetRewardNativeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRewardNativeRequest() *GetRewardNativeRequest {
	this := GetRewardNativeRequest{}
	return &this
}

// NewGetRewardNativeRequestWithDefaults instantiates a new GetRewardNativeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRewardNativeRequestWithDefaults() *GetRewardNativeRequest {
	this := GetRewardNativeRequest{}
	return &this
}

// GetMemberID returns the MemberID field value if set, zero value otherwise.
func (o *GetRewardNativeRequest) GetMemberID() string {
	if o == nil || IsNil(o.MemberID) {
		var ret string
		return ret
	}
	return *o.MemberID
}

// GetMemberIDOk returns a tuple with the MemberID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRewardNativeRequest) GetMemberIDOk() (*string, bool) {
	if o == nil || IsNil(o.MemberID) {
		return nil, false
	}
	return o.MemberID, true
}

// HasMemberID returns a boolean if a field has been set.
func (o *GetRewardNativeRequest) HasMemberID() bool {
	if o != nil && !IsNil(o.MemberID) {
		return true
	}

	return false
}

// SetMemberID gets a reference to the given string and assigns it to the MemberID field.
func (o *GetRewardNativeRequest) SetMemberID(v string) {
	o.MemberID = &v
}

// GetMerchantID returns the MerchantID field value if set, zero value otherwise.
func (o *GetRewardNativeRequest) GetMerchantID() string {
	if o == nil || IsNil(o.MerchantID) {
		var ret string
		return ret
	}
	return *o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRewardNativeRequest) GetMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantID) {
		return nil, false
	}
	return o.MerchantID, true
}

// HasMerchantID returns a boolean if a field has been set.
func (o *GetRewardNativeRequest) HasMerchantID() bool {
	if o != nil && !IsNil(o.MerchantID) {
		return true
	}

	return false
}

// SetMerchantID gets a reference to the given string and assigns it to the MerchantID field.
func (o *GetRewardNativeRequest) SetMerchantID(v string) {
	o.MerchantID = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *GetRewardNativeRequest) GetItems() []RewardItem {
	if o == nil || IsNil(o.Items) {
		var ret []RewardItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRewardNativeRequest) GetItemsOk() ([]RewardItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *GetRewardNativeRequest) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []RewardItem and assigns it to the Items field.
func (o *GetRewardNativeRequest) SetItems(v []RewardItem) {
	o.Items = v
}

// GetOrderValue returns the OrderValue field value if set, zero value otherwise.
func (o *GetRewardNativeRequest) GetOrderValue() int64 {
	if o == nil || IsNil(o.OrderValue) {
		var ret int64
		return ret
	}
	return *o.OrderValue
}

// GetOrderValueOk returns a tuple with the OrderValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRewardNativeRequest) GetOrderValueOk() (*int64, bool) {
	if o == nil || IsNil(o.OrderValue) {
		return nil, false
	}
	return o.OrderValue, true
}

// HasOrderValue returns a boolean if a field has been set.
func (o *GetRewardNativeRequest) HasOrderValue() bool {
	if o != nil && !IsNil(o.OrderValue) {
		return true
	}

	return false
}

// SetOrderValue gets a reference to the given int64 and assigns it to the OrderValue field.
func (o *GetRewardNativeRequest) SetOrderValue(v int64) {
	o.OrderValue = &v
}

func (o GetRewardNativeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRewardNativeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberID) {
		toSerialize["memberID"] = o.MemberID
	}
	if !IsNil(o.MerchantID) {
		toSerialize["merchantID"] = o.MerchantID
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.OrderValue) {
		toSerialize["orderValue"] = o.OrderValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetRewardNativeRequest) UnmarshalJSON(data []byte) (err error) {
	varGetRewardNativeRequest := _GetRewardNativeRequest{}

	err = json.Unmarshal(data, &varGetRewardNativeRequest)

	if err != nil {
		return err
	}

	*o = GetRewardNativeRequest(varGetRewardNativeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "memberID")
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "items")
		delete(additionalProperties, "orderValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetRewardNativeRequest struct {
	value *GetRewardNativeRequest
	isSet bool
}

func (v NullableGetRewardNativeRequest) Get() *GetRewardNativeRequest {
	return v.value
}

func (v *NullableGetRewardNativeRequest) Set(val *GetRewardNativeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRewardNativeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRewardNativeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRewardNativeRequest(val *GetRewardNativeRequest) *NullableGetRewardNativeRequest {
	return &NullableGetRewardNativeRequest{value: val, isSet: true}
}

func (v NullableGetRewardNativeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRewardNativeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


