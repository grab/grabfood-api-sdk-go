// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderDeliveryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDeliveryRequest{}

// OrderDeliveryRequest This request marks an order as delivered on GrabFood. 
type OrderDeliveryRequest struct {
	// The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
	OrderID string `json:"orderID"`
	// Specify the order's initial state.
	FromState string `json:"fromState"`
	// Specify the order's new state.
	ToState string `json:"toState"`
	AdditionalProperties map[string]interface{}
}

type _OrderDeliveryRequest OrderDeliveryRequest

// NewOrderDeliveryRequest instantiates a new OrderDeliveryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDeliveryRequest(orderID string, fromState string, toState string) *OrderDeliveryRequest {
	this := OrderDeliveryRequest{}
	this.OrderID = orderID
	this.FromState = fromState
	this.ToState = toState
	return &this
}

// NewOrderDeliveryRequestWithDefaults instantiates a new OrderDeliveryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDeliveryRequestWithDefaults() *OrderDeliveryRequest {
	this := OrderDeliveryRequest{}
	return &this
}

// GetOrderID returns the OrderID field value
func (o *OrderDeliveryRequest) GetOrderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value
// and a boolean to check if the value has been set.
func (o *OrderDeliveryRequest) GetOrderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderID, true
}

// SetOrderID sets field value
func (o *OrderDeliveryRequest) SetOrderID(v string) {
	o.OrderID = v
}

// GetFromState returns the FromState field value
func (o *OrderDeliveryRequest) GetFromState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromState
}

// GetFromStateOk returns a tuple with the FromState field value
// and a boolean to check if the value has been set.
func (o *OrderDeliveryRequest) GetFromStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromState, true
}

// SetFromState sets field value
func (o *OrderDeliveryRequest) SetFromState(v string) {
	o.FromState = v
}

// GetToState returns the ToState field value
func (o *OrderDeliveryRequest) GetToState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToState
}

// GetToStateOk returns a tuple with the ToState field value
// and a boolean to check if the value has been set.
func (o *OrderDeliveryRequest) GetToStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToState, true
}

// SetToState sets field value
func (o *OrderDeliveryRequest) SetToState(v string) {
	o.ToState = v
}

func (o OrderDeliveryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDeliveryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orderID"] = o.OrderID
	toSerialize["fromState"] = o.FromState
	toSerialize["toState"] = o.ToState

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderDeliveryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderID",
		"fromState",
		"toState",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderDeliveryRequest := _OrderDeliveryRequest{}

	err = json.Unmarshal(data, &varOrderDeliveryRequest)

	if err != nil {
		return err
	}

	*o = OrderDeliveryRequest(varOrderDeliveryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "orderID")
		delete(additionalProperties, "fromState")
		delete(additionalProperties, "toState")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderDeliveryRequest struct {
	value *OrderDeliveryRequest
	isSet bool
}

func (v NullableOrderDeliveryRequest) Get() *OrderDeliveryRequest {
	return v.value
}

func (v *NullableOrderDeliveryRequest) Set(val *OrderDeliveryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDeliveryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDeliveryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDeliveryRequest(val *OrderDeliveryRequest) *NullableOrderDeliveryRequest {
	return &NullableOrderDeliveryRequest{value: val, isSet: true}
}

func (v NullableOrderDeliveryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDeliveryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


