// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the EditOrderItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditOrderItem{}

// EditOrderItem struct for EditOrderItem
type EditOrderItem struct {
	// The item's ID in Grab system that can be obtained from the [Submit Order Webhook](#tag/submit-order-webhook/operation/submit-order-webhook) request payload parameters under `items[].grabItemID`, or `items[].outOfStockInstruction.replacementGrabItemID` for item replacement. External item ID from Partner system is only supported when `ADDED` status and `isExternalItemID: true`.
	ItemID string `json:"itemID"`
	// The item's edited status. Leave empty string if there is no change to the item.
	Status string `json:"status"`
	// The item's quantity. If the item is not being updated or deleted, use the original quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Only applicable for `ADDED`status. Indicate if the `itemID` is an external item ID. Grab checks for the items that are mapped to the provided item ID, considering their availability. If multiple Grab items are found to be mapped to the provided external item ID, the last updated item will be chosen. If no suitable record is found, an 400 error will be returned to the partner, indicating that the submitted external item ID cannot be edited.
	IsExternalItemID *bool `json:"isExternalItemID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EditOrderItem EditOrderItem

// NewEditOrderItem instantiates a new EditOrderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditOrderItem(itemID string, status string) *EditOrderItem {
	this := EditOrderItem{}
	this.ItemID = itemID
	this.Status = status
	return &this
}

// NewEditOrderItemWithDefaults instantiates a new EditOrderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditOrderItemWithDefaults() *EditOrderItem {
	this := EditOrderItem{}
	return &this
}

// GetItemID returns the ItemID field value
func (o *EditOrderItem) GetItemID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemID
}

// GetItemIDOk returns a tuple with the ItemID field value
// and a boolean to check if the value has been set.
func (o *EditOrderItem) GetItemIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemID, true
}

// SetItemID sets field value
func (o *EditOrderItem) SetItemID(v string) {
	o.ItemID = v
}

// GetStatus returns the Status field value
func (o *EditOrderItem) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EditOrderItem) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EditOrderItem) SetStatus(v string) {
	o.Status = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *EditOrderItem) GetQuantity() int64 {
	if o == nil || IsNil(o.Quantity) {
		var ret int64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrderItem) GetQuantityOk() (*int64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *EditOrderItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int64 and assigns it to the Quantity field.
func (o *EditOrderItem) SetQuantity(v int64) {
	o.Quantity = &v
}

// GetIsExternalItemID returns the IsExternalItemID field value if set, zero value otherwise.
func (o *EditOrderItem) GetIsExternalItemID() bool {
	if o == nil || IsNil(o.IsExternalItemID) {
		var ret bool
		return ret
	}
	return *o.IsExternalItemID
}

// GetIsExternalItemIDOk returns a tuple with the IsExternalItemID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrderItem) GetIsExternalItemIDOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExternalItemID) {
		return nil, false
	}
	return o.IsExternalItemID, true
}

// HasIsExternalItemID returns a boolean if a field has been set.
func (o *EditOrderItem) HasIsExternalItemID() bool {
	if o != nil && !IsNil(o.IsExternalItemID) {
		return true
	}

	return false
}

// SetIsExternalItemID gets a reference to the given bool and assigns it to the IsExternalItemID field.
func (o *EditOrderItem) SetIsExternalItemID(v bool) {
	o.IsExternalItemID = &v
}

func (o EditOrderItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditOrderItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["itemID"] = o.ItemID
	toSerialize["status"] = o.Status
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.IsExternalItemID) {
		toSerialize["isExternalItemID"] = o.IsExternalItemID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditOrderItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemID",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditOrderItem := _EditOrderItem{}

	err = json.Unmarshal(data, &varEditOrderItem)

	if err != nil {
		return err
	}

	*o = EditOrderItem(varEditOrderItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "itemID")
		delete(additionalProperties, "status")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "isExternalItemID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditOrderItem struct {
	value *EditOrderItem
	isSet bool
}

func (v NullableEditOrderItem) Get() *EditOrderItem {
	return v.value
}

func (v *NullableEditOrderItem) Set(val *EditOrderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableEditOrderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableEditOrderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditOrderItem(val *EditOrderItem) *NullableEditOrderItem {
	return &NullableEditOrderItem{value: val, isSet: true}
}

func (v NullableEditOrderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditOrderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


