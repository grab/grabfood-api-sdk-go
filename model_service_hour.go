// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceHour type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceHour{}

// ServiceHour A JSON object serviceHour for each day.
type ServiceHour struct {
	// The period type for when the outlet is open. - OpenPeriod = open only in given periods - OpenAllDay = open 24 hours - CloseAllDay = closed 24 hours 
	OpenPeriodType string `json:"openPeriodType"`
	// An array of open periods. Only required when `openPeriodType` is **OpenPeriod**
	Periods []OpenPeriod `json:"periods,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceHour ServiceHour

// NewServiceHour instantiates a new ServiceHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceHour(openPeriodType string) *ServiceHour {
	this := ServiceHour{}
	this.OpenPeriodType = openPeriodType
	return &this
}

// NewServiceHourWithDefaults instantiates a new ServiceHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceHourWithDefaults() *ServiceHour {
	this := ServiceHour{}
	return &this
}

// GetOpenPeriodType returns the OpenPeriodType field value
func (o *ServiceHour) GetOpenPeriodType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OpenPeriodType
}

// GetOpenPeriodTypeOk returns a tuple with the OpenPeriodType field value
// and a boolean to check if the value has been set.
func (o *ServiceHour) GetOpenPeriodTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenPeriodType, true
}

// SetOpenPeriodType sets field value
func (o *ServiceHour) SetOpenPeriodType(v string) {
	o.OpenPeriodType = v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *ServiceHour) GetPeriods() []OpenPeriod {
	if o == nil || IsNil(o.Periods) {
		var ret []OpenPeriod
		return ret
	}
	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHour) GetPeriodsOk() ([]OpenPeriod, bool) {
	if o == nil || IsNil(o.Periods) {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *ServiceHour) HasPeriods() bool {
	if o != nil && !IsNil(o.Periods) {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []OpenPeriod and assigns it to the Periods field.
func (o *ServiceHour) SetPeriods(v []OpenPeriod) {
	o.Periods = v
}

func (o ServiceHour) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceHour) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["openPeriodType"] = o.OpenPeriodType
	if !IsNil(o.Periods) {
		toSerialize["periods"] = o.Periods
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceHour) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"openPeriodType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceHour := _ServiceHour{}

	err = json.Unmarshal(data, &varServiceHour)

	if err != nil {
		return err
	}

	*o = ServiceHour(varServiceHour)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "openPeriodType")
		delete(additionalProperties, "periods")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceHour struct {
	value *ServiceHour
	isSet bool
}

func (v NullableServiceHour) Get() *ServiceHour {
	return v.value
}

func (v *NullableServiceHour) Set(val *ServiceHour) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceHour) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceHour(val *ServiceHour) *NullableServiceHour {
	return &NullableServiceHour{value: val, isSet: true}
}

func (v NullableServiceHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


