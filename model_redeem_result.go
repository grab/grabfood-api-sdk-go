// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the RedeemResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedeemResult{}

// RedeemResult A JSON object containing dine-in voucher details.
type RedeemResult struct {
	// To indicate whether the dine-in voucher redemption succeeded.
	Success *bool `json:"success,omitempty"`
	// The code for the reason of failed redemption. Empty if the `success` is true.  * `VOUCHER_REDEEMED` - The voucher has already been redeemed. * `INVALID_STATE` - The current status of voucher is EXPIRED or REFUNDED. * `REDEEM_FAILED` - Internal service error. * `INVALID_MERCHANT` - Voucher not applicable for this merchant. * `INVALID_ID` - Invalid certificateID. 
	Code *string `json:"code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RedeemResult RedeemResult

// NewRedeemResult instantiates a new RedeemResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedeemResult() *RedeemResult {
	this := RedeemResult{}
	return &this
}

// NewRedeemResultWithDefaults instantiates a new RedeemResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedeemResultWithDefaults() *RedeemResult {
	this := RedeemResult{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *RedeemResult) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeemResult) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *RedeemResult) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *RedeemResult) SetSuccess(v bool) {
	o.Success = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RedeemResult) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeemResult) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RedeemResult) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RedeemResult) SetCode(v string) {
	o.Code = &v
}

func (o RedeemResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedeemResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RedeemResult) UnmarshalJSON(data []byte) (err error) {
	varRedeemResult := _RedeemResult{}

	err = json.Unmarshal(data, &varRedeemResult)

	if err != nil {
		return err
	}

	*o = RedeemResult(varRedeemResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRedeemResult struct {
	value *RedeemResult
	isSet bool
}

func (v NullableRedeemResult) Get() *RedeemResult {
	return v.value
}

func (v *NullableRedeemResult) Set(val *RedeemResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRedeemResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRedeemResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedeemResult(val *RedeemResult) *NullableRedeemResult {
	return &NullableRedeemResult{value: val, isSet: true}
}

func (v NullableRedeemResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedeemResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


