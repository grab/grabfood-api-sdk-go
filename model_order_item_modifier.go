// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the OrderItemModifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemModifier{}

// OrderItemModifier struct for OrderItemModifier
type OrderItemModifier struct {
	// The modifier's ID that is on the partner's system.
	Id *string `json:"id,omitempty"`
	// The modifier's price (tax-inclusive) in minor format. `round(165 * (1 + 0.06)) = 175`.
	Price *int64 `json:"price,omitempty"`
	// Tax in minor format for 1 modifier. `165*0.06=10`. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated).
	Tax *int64 `json:"tax,omitempty"`
	// The number of modifiers present. The value is always 1.
	Quantity *int32 `json:"quantity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderItemModifier OrderItemModifier

// NewOrderItemModifier instantiates a new OrderItemModifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemModifier() *OrderItemModifier {
	this := OrderItemModifier{}
	return &this
}

// NewOrderItemModifierWithDefaults instantiates a new OrderItemModifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemModifierWithDefaults() *OrderItemModifier {
	this := OrderItemModifier{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderItemModifier) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemModifier) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderItemModifier) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderItemModifier) SetId(v string) {
	o.Id = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderItemModifier) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemModifier) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderItemModifier) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *OrderItemModifier) SetPrice(v int64) {
	o.Price = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *OrderItemModifier) GetTax() int64 {
	if o == nil || IsNil(o.Tax) {
		var ret int64
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemModifier) GetTaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *OrderItemModifier) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given int64 and assigns it to the Tax field.
func (o *OrderItemModifier) SetTax(v int64) {
	o.Tax = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderItemModifier) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemModifier) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderItemModifier) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *OrderItemModifier) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o OrderItemModifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemModifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderItemModifier) UnmarshalJSON(data []byte) (err error) {
	varOrderItemModifier := _OrderItemModifier{}

	err = json.Unmarshal(data, &varOrderItemModifier)

	if err != nil {
		return err
	}

	*o = OrderItemModifier(varOrderItemModifier)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "price")
		delete(additionalProperties, "tax")
		delete(additionalProperties, "quantity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderItemModifier struct {
	value *OrderItemModifier
	isSet bool
}

func (v NullableOrderItemModifier) Get() *OrderItemModifier {
	return v.value
}

func (v *NullableOrderItemModifier) Set(val *OrderItemModifier) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemModifier) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemModifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemModifier(val *OrderItemModifier) *NullableOrderItemModifier {
	return &NullableOrderItemModifier{value: val, isSet: true}
}

func (v NullableOrderItemModifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemModifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


