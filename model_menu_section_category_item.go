// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the MenuSectionCategoryItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSectionCategoryItem{}

// MenuSectionCategoryItem struct for MenuSectionCategoryItem
type MenuSectionCategoryItem struct {
	// The item's ID in the partner system. 
	Id string `json:"id"`
	// The name of the item.
	Name string `json:"name"`
	// Translation of the item name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
	NameTranslation *map[string]string `json:"nameTranslation,omitempty"`
	// The status for the item that is in the category. Refer to FAQs for more details about [availableStatus](#section/Menu/What-is-availableStatus).  Note: In order to set an item as \"UNAVAILABLE\", it is required to update both the `availableStatus` and `maxStock` fields, whereby the `maxStock` value should be set to 0. 
	AvailableStatus string `json:"availableStatus"`
	// The description of the item. There is a custom length limit of 2000 for `VN`. 
	Description *string `json:"description,omitempty"`
	// Translation of the item description. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).
	DescriptionTranslation *map[string]string `json:"descriptionTranslation,omitempty"`
	// The item's price (excluding tax) in minor format. For example: 1900 means $19 with `currency.exponent` as 2. Refer to [FAQ](#section/Menu/Is-the-item-price-with-or-without-tax) for more details. 
	Price int32 `json:"price"`
	// An array string for the itemâ€™s image URL links. Refer to FAQs for more details about [images](#section/Menu/What-are-the-recommended-formats-for-an-item-image). 
	Photos []string `json:"photos,omitempty"`
	// The item's special Tag. Refer to FAQs for more details about [specialType](#section/Menu/What's-specialType). 
	SpecialType *string `json:"specialType,omitempty"`
	// **For Indonesia only.** This field allows the configuration for an item to be marked as tax applicable, and marked item would then be included in a commercial invoice to consumers as per the government's regulations. 
	Taxable *bool `json:"taxable,omitempty"`
	// The barcode Number (GTIN). Max 64 allowed. GTIN must be 8, 12, 13, 14 numeric digits. 
	Barcode *string `json:"barcode,omitempty"`
	// Available stocks under inventory for this item. Auto reduce when there is order placed for this item. Empty value implies no limit.  Note: It is necessary to set `maxStock` to 0 if the `availableStatus` of the item is \"UNAVAILABLE\". Item will be set to \"AVAILABLE\" if `maxStock` > 0. 
	MaxStock *int32 `json:"maxStock,omitempty"`
	AdvancedPricing *AdvancedPricing `json:"advancedPricing,omitempty"`
	Purchasability *Purchasability `json:"purchasability,omitempty"`
	// An array of the modifierGroup JSON objects. Max 30 allowed per item. Refer to [Modifier groups](#modifier-groups) for more information.
	ModifierGroups []ModifierGroup `json:"modifierGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MenuSectionCategoryItem MenuSectionCategoryItem

// NewMenuSectionCategoryItem instantiates a new MenuSectionCategoryItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSectionCategoryItem(id string, name string, availableStatus string, price int32) *MenuSectionCategoryItem {
	this := MenuSectionCategoryItem{}
	this.Id = id
	this.Name = name
	this.AvailableStatus = availableStatus
	this.Price = price
	return &this
}

// NewMenuSectionCategoryItemWithDefaults instantiates a new MenuSectionCategoryItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSectionCategoryItemWithDefaults() *MenuSectionCategoryItem {
	this := MenuSectionCategoryItem{}
	return &this
}

// GetId returns the Id field value
func (o *MenuSectionCategoryItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MenuSectionCategoryItem) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MenuSectionCategoryItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MenuSectionCategoryItem) SetName(v string) {
	o.Name = v
}

// GetNameTranslation returns the NameTranslation field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetNameTranslation() map[string]string {
	if o == nil || IsNil(o.NameTranslation) {
		var ret map[string]string
		return ret
	}
	return *o.NameTranslation
}

// GetNameTranslationOk returns a tuple with the NameTranslation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetNameTranslationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.NameTranslation) {
		return nil, false
	}
	return o.NameTranslation, true
}

// HasNameTranslation returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasNameTranslation() bool {
	if o != nil && !IsNil(o.NameTranslation) {
		return true
	}

	return false
}

// SetNameTranslation gets a reference to the given map[string]string and assigns it to the NameTranslation field.
func (o *MenuSectionCategoryItem) SetNameTranslation(v map[string]string) {
	o.NameTranslation = &v
}

// GetAvailableStatus returns the AvailableStatus field value
func (o *MenuSectionCategoryItem) GetAvailableStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailableStatus
}

// GetAvailableStatusOk returns a tuple with the AvailableStatus field value
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetAvailableStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableStatus, true
}

// SetAvailableStatus sets field value
func (o *MenuSectionCategoryItem) SetAvailableStatus(v string) {
	o.AvailableStatus = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MenuSectionCategoryItem) SetDescription(v string) {
	o.Description = &v
}

// GetDescriptionTranslation returns the DescriptionTranslation field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetDescriptionTranslation() map[string]string {
	if o == nil || IsNil(o.DescriptionTranslation) {
		var ret map[string]string
		return ret
	}
	return *o.DescriptionTranslation
}

// GetDescriptionTranslationOk returns a tuple with the DescriptionTranslation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetDescriptionTranslationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.DescriptionTranslation) {
		return nil, false
	}
	return o.DescriptionTranslation, true
}

// HasDescriptionTranslation returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasDescriptionTranslation() bool {
	if o != nil && !IsNil(o.DescriptionTranslation) {
		return true
	}

	return false
}

// SetDescriptionTranslation gets a reference to the given map[string]string and assigns it to the DescriptionTranslation field.
func (o *MenuSectionCategoryItem) SetDescriptionTranslation(v map[string]string) {
	o.DescriptionTranslation = &v
}

// GetPrice returns the Price field value
func (o *MenuSectionCategoryItem) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *MenuSectionCategoryItem) SetPrice(v int32) {
	o.Price = v
}

// GetPhotos returns the Photos field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetPhotos() []string {
	if o == nil || IsNil(o.Photos) {
		var ret []string
		return ret
	}
	return o.Photos
}

// GetPhotosOk returns a tuple with the Photos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetPhotosOk() ([]string, bool) {
	if o == nil || IsNil(o.Photos) {
		return nil, false
	}
	return o.Photos, true
}

// HasPhotos returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasPhotos() bool {
	if o != nil && !IsNil(o.Photos) {
		return true
	}

	return false
}

// SetPhotos gets a reference to the given []string and assigns it to the Photos field.
func (o *MenuSectionCategoryItem) SetPhotos(v []string) {
	o.Photos = v
}

// GetSpecialType returns the SpecialType field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetSpecialType() string {
	if o == nil || IsNil(o.SpecialType) {
		var ret string
		return ret
	}
	return *o.SpecialType
}

// GetSpecialTypeOk returns a tuple with the SpecialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetSpecialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialType) {
		return nil, false
	}
	return o.SpecialType, true
}

// HasSpecialType returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasSpecialType() bool {
	if o != nil && !IsNil(o.SpecialType) {
		return true
	}

	return false
}

// SetSpecialType gets a reference to the given string and assigns it to the SpecialType field.
func (o *MenuSectionCategoryItem) SetSpecialType(v string) {
	o.SpecialType = &v
}

// GetTaxable returns the Taxable field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable) {
		var ret bool
		return ret
	}
	return *o.Taxable
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.Taxable) {
		return nil, false
	}
	return o.Taxable, true
}

// HasTaxable returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasTaxable() bool {
	if o != nil && !IsNil(o.Taxable) {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given bool and assigns it to the Taxable field.
func (o *MenuSectionCategoryItem) SetTaxable(v bool) {
	o.Taxable = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetBarcode() string {
	if o == nil || IsNil(o.Barcode) {
		var ret string
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetBarcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given string and assigns it to the Barcode field.
func (o *MenuSectionCategoryItem) SetBarcode(v string) {
	o.Barcode = &v
}

// GetMaxStock returns the MaxStock field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetMaxStock() int32 {
	if o == nil || IsNil(o.MaxStock) {
		var ret int32
		return ret
	}
	return *o.MaxStock
}

// GetMaxStockOk returns a tuple with the MaxStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetMaxStockOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxStock) {
		return nil, false
	}
	return o.MaxStock, true
}

// HasMaxStock returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasMaxStock() bool {
	if o != nil && !IsNil(o.MaxStock) {
		return true
	}

	return false
}

// SetMaxStock gets a reference to the given int32 and assigns it to the MaxStock field.
func (o *MenuSectionCategoryItem) SetMaxStock(v int32) {
	o.MaxStock = &v
}

// GetAdvancedPricing returns the AdvancedPricing field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetAdvancedPricing() AdvancedPricing {
	if o == nil || IsNil(o.AdvancedPricing) {
		var ret AdvancedPricing
		return ret
	}
	return *o.AdvancedPricing
}

// GetAdvancedPricingOk returns a tuple with the AdvancedPricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetAdvancedPricingOk() (*AdvancedPricing, bool) {
	if o == nil || IsNil(o.AdvancedPricing) {
		return nil, false
	}
	return o.AdvancedPricing, true
}

// HasAdvancedPricing returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasAdvancedPricing() bool {
	if o != nil && !IsNil(o.AdvancedPricing) {
		return true
	}

	return false
}

// SetAdvancedPricing gets a reference to the given AdvancedPricing and assigns it to the AdvancedPricing field.
func (o *MenuSectionCategoryItem) SetAdvancedPricing(v AdvancedPricing) {
	o.AdvancedPricing = &v
}

// GetPurchasability returns the Purchasability field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetPurchasability() Purchasability {
	if o == nil || IsNil(o.Purchasability) {
		var ret Purchasability
		return ret
	}
	return *o.Purchasability
}

// GetPurchasabilityOk returns a tuple with the Purchasability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetPurchasabilityOk() (*Purchasability, bool) {
	if o == nil || IsNil(o.Purchasability) {
		return nil, false
	}
	return o.Purchasability, true
}

// HasPurchasability returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasPurchasability() bool {
	if o != nil && !IsNil(o.Purchasability) {
		return true
	}

	return false
}

// SetPurchasability gets a reference to the given Purchasability and assigns it to the Purchasability field.
func (o *MenuSectionCategoryItem) SetPurchasability(v Purchasability) {
	o.Purchasability = &v
}

// GetModifierGroups returns the ModifierGroups field value if set, zero value otherwise.
func (o *MenuSectionCategoryItem) GetModifierGroups() []ModifierGroup {
	if o == nil || IsNil(o.ModifierGroups) {
		var ret []ModifierGroup
		return ret
	}
	return o.ModifierGroups
}

// GetModifierGroupsOk returns a tuple with the ModifierGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSectionCategoryItem) GetModifierGroupsOk() ([]ModifierGroup, bool) {
	if o == nil || IsNil(o.ModifierGroups) {
		return nil, false
	}
	return o.ModifierGroups, true
}

// HasModifierGroups returns a boolean if a field has been set.
func (o *MenuSectionCategoryItem) HasModifierGroups() bool {
	if o != nil && !IsNil(o.ModifierGroups) {
		return true
	}

	return false
}

// SetModifierGroups gets a reference to the given []ModifierGroup and assigns it to the ModifierGroups field.
func (o *MenuSectionCategoryItem) SetModifierGroups(v []ModifierGroup) {
	o.ModifierGroups = v
}

func (o MenuSectionCategoryItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSectionCategoryItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.NameTranslation) {
		toSerialize["nameTranslation"] = o.NameTranslation
	}
	toSerialize["availableStatus"] = o.AvailableStatus
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DescriptionTranslation) {
		toSerialize["descriptionTranslation"] = o.DescriptionTranslation
	}
	toSerialize["price"] = o.Price
	if !IsNil(o.Photos) {
		toSerialize["photos"] = o.Photos
	}
	if !IsNil(o.SpecialType) {
		toSerialize["specialType"] = o.SpecialType
	}
	if !IsNil(o.Taxable) {
		toSerialize["taxable"] = o.Taxable
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.MaxStock) {
		toSerialize["maxStock"] = o.MaxStock
	}
	if !IsNil(o.AdvancedPricing) {
		toSerialize["advancedPricing"] = o.AdvancedPricing
	}
	if !IsNil(o.Purchasability) {
		toSerialize["purchasability"] = o.Purchasability
	}
	if !IsNil(o.ModifierGroups) {
		toSerialize["modifierGroups"] = o.ModifierGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuSectionCategoryItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"availableStatus",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuSectionCategoryItem := _MenuSectionCategoryItem{}

	err = json.Unmarshal(data, &varMenuSectionCategoryItem)

	if err != nil {
		return err
	}

	*o = MenuSectionCategoryItem(varMenuSectionCategoryItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nameTranslation")
		delete(additionalProperties, "availableStatus")
		delete(additionalProperties, "description")
		delete(additionalProperties, "descriptionTranslation")
		delete(additionalProperties, "price")
		delete(additionalProperties, "photos")
		delete(additionalProperties, "specialType")
		delete(additionalProperties, "taxable")
		delete(additionalProperties, "barcode")
		delete(additionalProperties, "maxStock")
		delete(additionalProperties, "advancedPricing")
		delete(additionalProperties, "purchasability")
		delete(additionalProperties, "modifierGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuSectionCategoryItem struct {
	value *MenuSectionCategoryItem
	isSet bool
}

func (v NullableMenuSectionCategoryItem) Get() *MenuSectionCategoryItem {
	return v.value
}

func (v *NullableMenuSectionCategoryItem) Set(val *MenuSectionCategoryItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSectionCategoryItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSectionCategoryItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSectionCategoryItem(val *MenuSectionCategoryItem) *NullableMenuSectionCategoryItem {
	return &NullableMenuSectionCategoryItem{value: val, isSet: true}
}

func (v NullableMenuSectionCategoryItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSectionCategoryItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


