// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the MenuSyncResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSyncResponse{}

// MenuSyncResponse 
type MenuSyncResponse struct {
	// The Unix time the specified menu was created in GrabFood's database.
	CreatedTime time.Time `json:"createdTime"`
	// The Unix time the specified menu was created in GrabFood's database.
	UpdatedTime time.Time `json:"updatedTime"`
	// The status code for this request. See [Menu sync response statuses](#section/Menu-sync-response-statuses) for more information.
	Code string `json:"code"`
	// An array of strings of error message.
	Errors []string `json:"errors,omitempty"`
	Sections []MenuSyncFail `json:"sections,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MenuSyncResponse MenuSyncResponse

// NewMenuSyncResponse instantiates a new MenuSyncResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSyncResponse(createdTime time.Time, updatedTime time.Time, code string) *MenuSyncResponse {
	this := MenuSyncResponse{}
	this.CreatedTime = createdTime
	this.UpdatedTime = updatedTime
	this.Code = code
	return &this
}

// NewMenuSyncResponseWithDefaults instantiates a new MenuSyncResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSyncResponseWithDefaults() *MenuSyncResponse {
	this := MenuSyncResponse{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value
func (o *MenuSyncResponse) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *MenuSyncResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *MenuSyncResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetUpdatedTime returns the UpdatedTime field value
func (o *MenuSyncResponse) GetUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value
// and a boolean to check if the value has been set.
func (o *MenuSyncResponse) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTime, true
}

// SetUpdatedTime sets field value
func (o *MenuSyncResponse) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = v
}

// GetCode returns the Code field value
func (o *MenuSyncResponse) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *MenuSyncResponse) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *MenuSyncResponse) SetCode(v string) {
	o.Code = v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuSyncResponse) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuSyncResponse) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *MenuSyncResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *MenuSyncResponse) SetErrors(v []string) {
	o.Errors = v
}

// GetSections returns the Sections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuSyncResponse) GetSections() []MenuSyncFail {
	if o == nil {
		var ret []MenuSyncFail
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuSyncResponse) GetSectionsOk() ([]MenuSyncFail, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *MenuSyncResponse) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []MenuSyncFail and assigns it to the Sections field.
func (o *MenuSyncResponse) SetSections(v []MenuSyncFail) {
	o.Sections = v
}

func (o MenuSyncResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSyncResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdTime"] = o.CreatedTime
	toSerialize["updatedTime"] = o.UpdatedTime
	toSerialize["code"] = o.Code
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuSyncResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdTime",
		"updatedTime",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuSyncResponse := _MenuSyncResponse{}

	err = json.Unmarshal(data, &varMenuSyncResponse)

	if err != nil {
		return err
	}

	*o = MenuSyncResponse(varMenuSyncResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdTime")
		delete(additionalProperties, "updatedTime")
		delete(additionalProperties, "code")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "sections")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuSyncResponse struct {
	value *MenuSyncResponse
	isSet bool
}

func (v NullableMenuSyncResponse) Get() *MenuSyncResponse {
	return v.value
}

func (v *NullableMenuSyncResponse) Set(val *MenuSyncResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSyncResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSyncResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSyncResponse(val *MenuSyncResponse) *NullableMenuSyncResponse {
	return &NullableMenuSyncResponse{value: val, isSet: true}
}

func (v NullableMenuSyncResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSyncResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


