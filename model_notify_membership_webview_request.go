// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the NotifyMembershipWebviewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyMembershipWebviewRequest{}

// NotifyMembershipWebviewRequest This request submits membership registration request to partner. 
type NotifyMembershipWebviewRequest struct {
	// The unique member ID on the partner's database.
	MemberID *string `json:"memberID,omitempty"`
	// The id used to identify an unique grab user.
	GrabID *string `json:"grabID,omitempty"`
	// The merchant's ID that is in GrabFood's database.
	MerchantID *string `json:"merchantID,omitempty"`
	// Action completed in partner's webview.
	Action *string `json:"action,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NotifyMembershipWebviewRequest NotifyMembershipWebviewRequest

// NewNotifyMembershipWebviewRequest instantiates a new NotifyMembershipWebviewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyMembershipWebviewRequest() *NotifyMembershipWebviewRequest {
	this := NotifyMembershipWebviewRequest{}
	return &this
}

// NewNotifyMembershipWebviewRequestWithDefaults instantiates a new NotifyMembershipWebviewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyMembershipWebviewRequestWithDefaults() *NotifyMembershipWebviewRequest {
	this := NotifyMembershipWebviewRequest{}
	return &this
}

// GetMemberID returns the MemberID field value if set, zero value otherwise.
func (o *NotifyMembershipWebviewRequest) GetMemberID() string {
	if o == nil || IsNil(o.MemberID) {
		var ret string
		return ret
	}
	return *o.MemberID
}

// GetMemberIDOk returns a tuple with the MemberID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyMembershipWebviewRequest) GetMemberIDOk() (*string, bool) {
	if o == nil || IsNil(o.MemberID) {
		return nil, false
	}
	return o.MemberID, true
}

// HasMemberID returns a boolean if a field has been set.
func (o *NotifyMembershipWebviewRequest) HasMemberID() bool {
	if o != nil && !IsNil(o.MemberID) {
		return true
	}

	return false
}

// SetMemberID gets a reference to the given string and assigns it to the MemberID field.
func (o *NotifyMembershipWebviewRequest) SetMemberID(v string) {
	o.MemberID = &v
}

// GetGrabID returns the GrabID field value if set, zero value otherwise.
func (o *NotifyMembershipWebviewRequest) GetGrabID() string {
	if o == nil || IsNil(o.GrabID) {
		var ret string
		return ret
	}
	return *o.GrabID
}

// GetGrabIDOk returns a tuple with the GrabID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyMembershipWebviewRequest) GetGrabIDOk() (*string, bool) {
	if o == nil || IsNil(o.GrabID) {
		return nil, false
	}
	return o.GrabID, true
}

// HasGrabID returns a boolean if a field has been set.
func (o *NotifyMembershipWebviewRequest) HasGrabID() bool {
	if o != nil && !IsNil(o.GrabID) {
		return true
	}

	return false
}

// SetGrabID gets a reference to the given string and assigns it to the GrabID field.
func (o *NotifyMembershipWebviewRequest) SetGrabID(v string) {
	o.GrabID = &v
}

// GetMerchantID returns the MerchantID field value if set, zero value otherwise.
func (o *NotifyMembershipWebviewRequest) GetMerchantID() string {
	if o == nil || IsNil(o.MerchantID) {
		var ret string
		return ret
	}
	return *o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyMembershipWebviewRequest) GetMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantID) {
		return nil, false
	}
	return o.MerchantID, true
}

// HasMerchantID returns a boolean if a field has been set.
func (o *NotifyMembershipWebviewRequest) HasMerchantID() bool {
	if o != nil && !IsNil(o.MerchantID) {
		return true
	}

	return false
}

// SetMerchantID gets a reference to the given string and assigns it to the MerchantID field.
func (o *NotifyMembershipWebviewRequest) SetMerchantID(v string) {
	o.MerchantID = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *NotifyMembershipWebviewRequest) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyMembershipWebviewRequest) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *NotifyMembershipWebviewRequest) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *NotifyMembershipWebviewRequest) SetAction(v string) {
	o.Action = &v
}

func (o NotifyMembershipWebviewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyMembershipWebviewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberID) {
		toSerialize["memberID"] = o.MemberID
	}
	if !IsNil(o.GrabID) {
		toSerialize["grabID"] = o.GrabID
	}
	if !IsNil(o.MerchantID) {
		toSerialize["merchantID"] = o.MerchantID
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotifyMembershipWebviewRequest) UnmarshalJSON(data []byte) (err error) {
	varNotifyMembershipWebviewRequest := _NotifyMembershipWebviewRequest{}

	err = json.Unmarshal(data, &varNotifyMembershipWebviewRequest)

	if err != nil {
		return err
	}

	*o = NotifyMembershipWebviewRequest(varNotifyMembershipWebviewRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "memberID")
		delete(additionalProperties, "grabID")
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotifyMembershipWebviewRequest struct {
	value *NotifyMembershipWebviewRequest
	isSet bool
}

func (v NullableNotifyMembershipWebviewRequest) Get() *NotifyMembershipWebviewRequest {
	return v.value
}

func (v *NullableNotifyMembershipWebviewRequest) Set(val *NotifyMembershipWebviewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyMembershipWebviewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyMembershipWebviewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyMembershipWebviewRequest(val *NotifyMembershipWebviewRequest) *NullableNotifyMembershipWebviewRequest {
	return &NullableNotifyMembershipWebviewRequest{value: val, isSet: true}
}

func (v NullableNotifyMembershipWebviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyMembershipWebviewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


