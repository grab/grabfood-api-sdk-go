// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the CampaignQuotas type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignQuotas{}

// CampaignQuotas The quotas/limits for a particular campaign.
type CampaignQuotas struct {
	// The maximum number of redemptions. Default is unlimited if unspecified. 
	TotalCount *int64 `json:"totalCount,omitempty"`
	// The maximum number of redemptions per user. Default is unlimited if unspecified.
	TotalCountPerUser *int64 `json:"totalCountPerUser,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CampaignQuotas CampaignQuotas

// NewCampaignQuotas instantiates a new CampaignQuotas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignQuotas() *CampaignQuotas {
	this := CampaignQuotas{}
	return &this
}

// NewCampaignQuotasWithDefaults instantiates a new CampaignQuotas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignQuotasWithDefaults() *CampaignQuotas {
	this := CampaignQuotas{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *CampaignQuotas) GetTotalCount() int64 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignQuotas) GetTotalCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *CampaignQuotas) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *CampaignQuotas) SetTotalCount(v int64) {
	o.TotalCount = &v
}

// GetTotalCountPerUser returns the TotalCountPerUser field value if set, zero value otherwise.
func (o *CampaignQuotas) GetTotalCountPerUser() int64 {
	if o == nil || IsNil(o.TotalCountPerUser) {
		var ret int64
		return ret
	}
	return *o.TotalCountPerUser
}

// GetTotalCountPerUserOk returns a tuple with the TotalCountPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignQuotas) GetTotalCountPerUserOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCountPerUser) {
		return nil, false
	}
	return o.TotalCountPerUser, true
}

// HasTotalCountPerUser returns a boolean if a field has been set.
func (o *CampaignQuotas) HasTotalCountPerUser() bool {
	if o != nil && !IsNil(o.TotalCountPerUser) {
		return true
	}

	return false
}

// SetTotalCountPerUser gets a reference to the given int64 and assigns it to the TotalCountPerUser field.
func (o *CampaignQuotas) SetTotalCountPerUser(v int64) {
	o.TotalCountPerUser = &v
}

func (o CampaignQuotas) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignQuotas) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !IsNil(o.TotalCountPerUser) {
		toSerialize["totalCountPerUser"] = o.TotalCountPerUser
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CampaignQuotas) UnmarshalJSON(data []byte) (err error) {
	varCampaignQuotas := _CampaignQuotas{}

	err = json.Unmarshal(data, &varCampaignQuotas)

	if err != nil {
		return err
	}

	*o = CampaignQuotas(varCampaignQuotas)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "totalCount")
		delete(additionalProperties, "totalCountPerUser")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCampaignQuotas struct {
	value *CampaignQuotas
	isSet bool
}

func (v NullableCampaignQuotas) Get() *CampaignQuotas {
	return v.value
}

func (v *NullableCampaignQuotas) Set(val *CampaignQuotas) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignQuotas) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignQuotas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignQuotas(val *CampaignQuotas) *NullableCampaignQuotas {
	return &NullableCampaignQuotas{value: val, isSet: true}
}

func (v NullableCampaignQuotas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignQuotas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


