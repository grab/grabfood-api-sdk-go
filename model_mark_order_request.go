// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the MarkOrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkOrderRequest{}

// MarkOrderRequest This request marks an order as ready for delivery or completed on GrabFood. 
type MarkOrderRequest struct {
	// The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
	OrderID string `json:"orderID"`
	// The status to be marked accordingly.  * `1` - mark order as ready  * `2` - mark order as completed and only applicable to **dine-in** orders 
	MarkStatus int32 `json:"markStatus"`
	AdditionalProperties map[string]interface{}
}

type _MarkOrderRequest MarkOrderRequest

// NewMarkOrderRequest instantiates a new MarkOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkOrderRequest(orderID string, markStatus int32) *MarkOrderRequest {
	this := MarkOrderRequest{}
	this.OrderID = orderID
	this.MarkStatus = markStatus
	return &this
}

// NewMarkOrderRequestWithDefaults instantiates a new MarkOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkOrderRequestWithDefaults() *MarkOrderRequest {
	this := MarkOrderRequest{}
	return &this
}

// GetOrderID returns the OrderID field value
func (o *MarkOrderRequest) GetOrderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value
// and a boolean to check if the value has been set.
func (o *MarkOrderRequest) GetOrderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderID, true
}

// SetOrderID sets field value
func (o *MarkOrderRequest) SetOrderID(v string) {
	o.OrderID = v
}

// GetMarkStatus returns the MarkStatus field value
func (o *MarkOrderRequest) GetMarkStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MarkStatus
}

// GetMarkStatusOk returns a tuple with the MarkStatus field value
// and a boolean to check if the value has been set.
func (o *MarkOrderRequest) GetMarkStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarkStatus, true
}

// SetMarkStatus sets field value
func (o *MarkOrderRequest) SetMarkStatus(v int32) {
	o.MarkStatus = v
}

func (o MarkOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orderID"] = o.OrderID
	toSerialize["markStatus"] = o.MarkStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MarkOrderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderID",
		"markStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarkOrderRequest := _MarkOrderRequest{}

	err = json.Unmarshal(data, &varMarkOrderRequest)

	if err != nil {
		return err
	}

	*o = MarkOrderRequest(varMarkOrderRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "orderID")
		delete(additionalProperties, "markStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMarkOrderRequest struct {
	value *MarkOrderRequest
	isSet bool
}

func (v NullableMarkOrderRequest) Get() *MarkOrderRequest {
	return v.value
}

func (v *NullableMarkOrderRequest) Set(val *MarkOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkOrderRequest(val *MarkOrderRequest) *NullableMarkOrderRequest {
	return &NullableMarkOrderRequest{value: val, isSet: true}
}

func (v NullableMarkOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


