// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderPrice{}

// OrderPrice A JSON object containing order's price in the minor unit format.
type OrderPrice struct {
	// Total item and modifier price (tax-inclusive) in the minor unit. `Sum of all (Item price * quantity) | 2550*1=2550`.
	Subtotal int64 `json:"subtotal"`
	// GrabFood's tax in the minor unit. `(subtotal-merchantFundPromo)* Tax /(1+Tax) | (2550-475)*0.06/1.06=117`. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated).
	Tax *int64 `json:"tax,omitempty"`
	// Any additional fee charged by merchant, which is 100% paid out to the merchant. Eg. Takeaway, packaging costs, dine-in charge.
	MerchantChargeFee *int64 `json:"merchantChargeFee,omitempty"`
	// GrabFood's promo fund in the minor unit. Calculated based on funded ratio.
	GrabFundPromo *int64 `json:"grabFundPromo,omitempty"`
	// The merchant's promo fund in the minor unit. Calculated based on funded ratio.
	MerchantFundPromo *int64 `json:"merchantFundPromo,omitempty"`
	// The total amount promo applied to the basket items only (item level/order level) in the minor unit. Delivery fee is excluded. `(grabFundPromo + merchantFundPromo) | 300 + 475 = 775` 
	BasketPromo *int64 `json:"basketPromo,omitempty"`
	// The delivery fee in the minor unit.
	DeliveryFee *int64 `json:"deliveryFee,omitempty"`
	// The total amount consumer paid in the minor unit. `(subtotal + deliveryFee) - (sum of all promo) | (2550+400)-775=2175`
	EaterPayment int64 `json:"eaterPayment"`
	AdditionalProperties map[string]interface{}
}

type _OrderPrice OrderPrice

// NewOrderPrice instantiates a new OrderPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderPrice(subtotal int64, eaterPayment int64) *OrderPrice {
	this := OrderPrice{}
	this.Subtotal = subtotal
	this.EaterPayment = eaterPayment
	return &this
}

// NewOrderPriceWithDefaults instantiates a new OrderPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderPriceWithDefaults() *OrderPrice {
	this := OrderPrice{}
	return &this
}

// GetSubtotal returns the Subtotal field value
func (o *OrderPrice) GetSubtotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Subtotal
}

// GetSubtotalOk returns a tuple with the Subtotal field value
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetSubtotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtotal, true
}

// SetSubtotal sets field value
func (o *OrderPrice) SetSubtotal(v int64) {
	o.Subtotal = v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *OrderPrice) GetTax() int64 {
	if o == nil || IsNil(o.Tax) {
		var ret int64
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetTaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *OrderPrice) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given int64 and assigns it to the Tax field.
func (o *OrderPrice) SetTax(v int64) {
	o.Tax = &v
}

// GetMerchantChargeFee returns the MerchantChargeFee field value if set, zero value otherwise.
func (o *OrderPrice) GetMerchantChargeFee() int64 {
	if o == nil || IsNil(o.MerchantChargeFee) {
		var ret int64
		return ret
	}
	return *o.MerchantChargeFee
}

// GetMerchantChargeFeeOk returns a tuple with the MerchantChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetMerchantChargeFeeOk() (*int64, bool) {
	if o == nil || IsNil(o.MerchantChargeFee) {
		return nil, false
	}
	return o.MerchantChargeFee, true
}

// HasMerchantChargeFee returns a boolean if a field has been set.
func (o *OrderPrice) HasMerchantChargeFee() bool {
	if o != nil && !IsNil(o.MerchantChargeFee) {
		return true
	}

	return false
}

// SetMerchantChargeFee gets a reference to the given int64 and assigns it to the MerchantChargeFee field.
func (o *OrderPrice) SetMerchantChargeFee(v int64) {
	o.MerchantChargeFee = &v
}

// GetGrabFundPromo returns the GrabFundPromo field value if set, zero value otherwise.
func (o *OrderPrice) GetGrabFundPromo() int64 {
	if o == nil || IsNil(o.GrabFundPromo) {
		var ret int64
		return ret
	}
	return *o.GrabFundPromo
}

// GetGrabFundPromoOk returns a tuple with the GrabFundPromo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetGrabFundPromoOk() (*int64, bool) {
	if o == nil || IsNil(o.GrabFundPromo) {
		return nil, false
	}
	return o.GrabFundPromo, true
}

// HasGrabFundPromo returns a boolean if a field has been set.
func (o *OrderPrice) HasGrabFundPromo() bool {
	if o != nil && !IsNil(o.GrabFundPromo) {
		return true
	}

	return false
}

// SetGrabFundPromo gets a reference to the given int64 and assigns it to the GrabFundPromo field.
func (o *OrderPrice) SetGrabFundPromo(v int64) {
	o.GrabFundPromo = &v
}

// GetMerchantFundPromo returns the MerchantFundPromo field value if set, zero value otherwise.
func (o *OrderPrice) GetMerchantFundPromo() int64 {
	if o == nil || IsNil(o.MerchantFundPromo) {
		var ret int64
		return ret
	}
	return *o.MerchantFundPromo
}

// GetMerchantFundPromoOk returns a tuple with the MerchantFundPromo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetMerchantFundPromoOk() (*int64, bool) {
	if o == nil || IsNil(o.MerchantFundPromo) {
		return nil, false
	}
	return o.MerchantFundPromo, true
}

// HasMerchantFundPromo returns a boolean if a field has been set.
func (o *OrderPrice) HasMerchantFundPromo() bool {
	if o != nil && !IsNil(o.MerchantFundPromo) {
		return true
	}

	return false
}

// SetMerchantFundPromo gets a reference to the given int64 and assigns it to the MerchantFundPromo field.
func (o *OrderPrice) SetMerchantFundPromo(v int64) {
	o.MerchantFundPromo = &v
}

// GetBasketPromo returns the BasketPromo field value if set, zero value otherwise.
func (o *OrderPrice) GetBasketPromo() int64 {
	if o == nil || IsNil(o.BasketPromo) {
		var ret int64
		return ret
	}
	return *o.BasketPromo
}

// GetBasketPromoOk returns a tuple with the BasketPromo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetBasketPromoOk() (*int64, bool) {
	if o == nil || IsNil(o.BasketPromo) {
		return nil, false
	}
	return o.BasketPromo, true
}

// HasBasketPromo returns a boolean if a field has been set.
func (o *OrderPrice) HasBasketPromo() bool {
	if o != nil && !IsNil(o.BasketPromo) {
		return true
	}

	return false
}

// SetBasketPromo gets a reference to the given int64 and assigns it to the BasketPromo field.
func (o *OrderPrice) SetBasketPromo(v int64) {
	o.BasketPromo = &v
}

// GetDeliveryFee returns the DeliveryFee field value if set, zero value otherwise.
func (o *OrderPrice) GetDeliveryFee() int64 {
	if o == nil || IsNil(o.DeliveryFee) {
		var ret int64
		return ret
	}
	return *o.DeliveryFee
}

// GetDeliveryFeeOk returns a tuple with the DeliveryFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetDeliveryFeeOk() (*int64, bool) {
	if o == nil || IsNil(o.DeliveryFee) {
		return nil, false
	}
	return o.DeliveryFee, true
}

// HasDeliveryFee returns a boolean if a field has been set.
func (o *OrderPrice) HasDeliveryFee() bool {
	if o != nil && !IsNil(o.DeliveryFee) {
		return true
	}

	return false
}

// SetDeliveryFee gets a reference to the given int64 and assigns it to the DeliveryFee field.
func (o *OrderPrice) SetDeliveryFee(v int64) {
	o.DeliveryFee = &v
}

// GetEaterPayment returns the EaterPayment field value
func (o *OrderPrice) GetEaterPayment() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EaterPayment
}

// GetEaterPaymentOk returns a tuple with the EaterPayment field value
// and a boolean to check if the value has been set.
func (o *OrderPrice) GetEaterPaymentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EaterPayment, true
}

// SetEaterPayment sets field value
func (o *OrderPrice) SetEaterPayment(v int64) {
	o.EaterPayment = v
}

func (o OrderPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subtotal"] = o.Subtotal
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.MerchantChargeFee) {
		toSerialize["merchantChargeFee"] = o.MerchantChargeFee
	}
	if !IsNil(o.GrabFundPromo) {
		toSerialize["grabFundPromo"] = o.GrabFundPromo
	}
	if !IsNil(o.MerchantFundPromo) {
		toSerialize["merchantFundPromo"] = o.MerchantFundPromo
	}
	if !IsNil(o.BasketPromo) {
		toSerialize["basketPromo"] = o.BasketPromo
	}
	if !IsNil(o.DeliveryFee) {
		toSerialize["deliveryFee"] = o.DeliveryFee
	}
	toSerialize["eaterPayment"] = o.EaterPayment

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subtotal",
		"eaterPayment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderPrice := _OrderPrice{}

	err = json.Unmarshal(data, &varOrderPrice)

	if err != nil {
		return err
	}

	*o = OrderPrice(varOrderPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subtotal")
		delete(additionalProperties, "tax")
		delete(additionalProperties, "merchantChargeFee")
		delete(additionalProperties, "grabFundPromo")
		delete(additionalProperties, "merchantFundPromo")
		delete(additionalProperties, "basketPromo")
		delete(additionalProperties, "deliveryFee")
		delete(additionalProperties, "eaterPayment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderPrice struct {
	value *OrderPrice
	isSet bool
}

func (v NullableOrderPrice) Get() *OrderPrice {
	return v.value
}

func (v *NullableOrderPrice) Set(val *OrderPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPrice(val *OrderPrice) *NullableOrderPrice {
	return &NullableOrderPrice{value: val, isSet: true}
}

func (v NullableOrderPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


