// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the WorkingHour type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkingHour{}

// WorkingHour A JSON object that describes the workingHour for each day.
type WorkingHour struct {
	Sun *WorkingHourDay `json:"sun,omitempty"`
	Mon *WorkingHourDay `json:"mon,omitempty"`
	Tue *WorkingHourDay `json:"tue,omitempty"`
	Wed *WorkingHourDay `json:"wed,omitempty"`
	Thu *WorkingHourDay `json:"thu,omitempty"`
	Fri *WorkingHourDay `json:"fri,omitempty"`
	Sat *WorkingHourDay `json:"sat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkingHour WorkingHour

// NewWorkingHour instantiates a new WorkingHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkingHour() *WorkingHour {
	this := WorkingHour{}
	return &this
}

// NewWorkingHourWithDefaults instantiates a new WorkingHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkingHourWithDefaults() *WorkingHour {
	this := WorkingHour{}
	return &this
}

// GetSun returns the Sun field value if set, zero value otherwise.
func (o *WorkingHour) GetSun() WorkingHourDay {
	if o == nil || IsNil(o.Sun) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Sun
}

// GetSunOk returns a tuple with the Sun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetSunOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Sun) {
		return nil, false
	}
	return o.Sun, true
}

// HasSun returns a boolean if a field has been set.
func (o *WorkingHour) HasSun() bool {
	if o != nil && !IsNil(o.Sun) {
		return true
	}

	return false
}

// SetSun gets a reference to the given WorkingHourDay and assigns it to the Sun field.
func (o *WorkingHour) SetSun(v WorkingHourDay) {
	o.Sun = &v
}

// GetMon returns the Mon field value if set, zero value otherwise.
func (o *WorkingHour) GetMon() WorkingHourDay {
	if o == nil || IsNil(o.Mon) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Mon
}

// GetMonOk returns a tuple with the Mon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetMonOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Mon) {
		return nil, false
	}
	return o.Mon, true
}

// HasMon returns a boolean if a field has been set.
func (o *WorkingHour) HasMon() bool {
	if o != nil && !IsNil(o.Mon) {
		return true
	}

	return false
}

// SetMon gets a reference to the given WorkingHourDay and assigns it to the Mon field.
func (o *WorkingHour) SetMon(v WorkingHourDay) {
	o.Mon = &v
}

// GetTue returns the Tue field value if set, zero value otherwise.
func (o *WorkingHour) GetTue() WorkingHourDay {
	if o == nil || IsNil(o.Tue) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Tue
}

// GetTueOk returns a tuple with the Tue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetTueOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Tue) {
		return nil, false
	}
	return o.Tue, true
}

// HasTue returns a boolean if a field has been set.
func (o *WorkingHour) HasTue() bool {
	if o != nil && !IsNil(o.Tue) {
		return true
	}

	return false
}

// SetTue gets a reference to the given WorkingHourDay and assigns it to the Tue field.
func (o *WorkingHour) SetTue(v WorkingHourDay) {
	o.Tue = &v
}

// GetWed returns the Wed field value if set, zero value otherwise.
func (o *WorkingHour) GetWed() WorkingHourDay {
	if o == nil || IsNil(o.Wed) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Wed
}

// GetWedOk returns a tuple with the Wed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetWedOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Wed) {
		return nil, false
	}
	return o.Wed, true
}

// HasWed returns a boolean if a field has been set.
func (o *WorkingHour) HasWed() bool {
	if o != nil && !IsNil(o.Wed) {
		return true
	}

	return false
}

// SetWed gets a reference to the given WorkingHourDay and assigns it to the Wed field.
func (o *WorkingHour) SetWed(v WorkingHourDay) {
	o.Wed = &v
}

// GetThu returns the Thu field value if set, zero value otherwise.
func (o *WorkingHour) GetThu() WorkingHourDay {
	if o == nil || IsNil(o.Thu) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Thu
}

// GetThuOk returns a tuple with the Thu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetThuOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Thu) {
		return nil, false
	}
	return o.Thu, true
}

// HasThu returns a boolean if a field has been set.
func (o *WorkingHour) HasThu() bool {
	if o != nil && !IsNil(o.Thu) {
		return true
	}

	return false
}

// SetThu gets a reference to the given WorkingHourDay and assigns it to the Thu field.
func (o *WorkingHour) SetThu(v WorkingHourDay) {
	o.Thu = &v
}

// GetFri returns the Fri field value if set, zero value otherwise.
func (o *WorkingHour) GetFri() WorkingHourDay {
	if o == nil || IsNil(o.Fri) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Fri
}

// GetFriOk returns a tuple with the Fri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetFriOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Fri) {
		return nil, false
	}
	return o.Fri, true
}

// HasFri returns a boolean if a field has been set.
func (o *WorkingHour) HasFri() bool {
	if o != nil && !IsNil(o.Fri) {
		return true
	}

	return false
}

// SetFri gets a reference to the given WorkingHourDay and assigns it to the Fri field.
func (o *WorkingHour) SetFri(v WorkingHourDay) {
	o.Fri = &v
}

// GetSat returns the Sat field value if set, zero value otherwise.
func (o *WorkingHour) GetSat() WorkingHourDay {
	if o == nil || IsNil(o.Sat) {
		var ret WorkingHourDay
		return ret
	}
	return *o.Sat
}

// GetSatOk returns a tuple with the Sat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkingHour) GetSatOk() (*WorkingHourDay, bool) {
	if o == nil || IsNil(o.Sat) {
		return nil, false
	}
	return o.Sat, true
}

// HasSat returns a boolean if a field has been set.
func (o *WorkingHour) HasSat() bool {
	if o != nil && !IsNil(o.Sat) {
		return true
	}

	return false
}

// SetSat gets a reference to the given WorkingHourDay and assigns it to the Sat field.
func (o *WorkingHour) SetSat(v WorkingHourDay) {
	o.Sat = &v
}

func (o WorkingHour) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkingHour) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sun) {
		toSerialize["sun"] = o.Sun
	}
	if !IsNil(o.Mon) {
		toSerialize["mon"] = o.Mon
	}
	if !IsNil(o.Tue) {
		toSerialize["tue"] = o.Tue
	}
	if !IsNil(o.Wed) {
		toSerialize["wed"] = o.Wed
	}
	if !IsNil(o.Thu) {
		toSerialize["thu"] = o.Thu
	}
	if !IsNil(o.Fri) {
		toSerialize["fri"] = o.Fri
	}
	if !IsNil(o.Sat) {
		toSerialize["sat"] = o.Sat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkingHour) UnmarshalJSON(data []byte) (err error) {
	varWorkingHour := _WorkingHour{}

	err = json.Unmarshal(data, &varWorkingHour)

	if err != nil {
		return err
	}

	*o = WorkingHour(varWorkingHour)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sun")
		delete(additionalProperties, "mon")
		delete(additionalProperties, "tue")
		delete(additionalProperties, "wed")
		delete(additionalProperties, "thu")
		delete(additionalProperties, "fri")
		delete(additionalProperties, "sat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkingHour struct {
	value *WorkingHour
	isSet bool
}

func (v NullableWorkingHour) Get() *WorkingHour {
	return v.value
}

func (v *NullableWorkingHour) Set(val *WorkingHour) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkingHour) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkingHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkingHour(val *WorkingHour) *NullableWorkingHour {
	return &NullableWorkingHour{value: val, isSet: true}
}

func (v NullableWorkingHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkingHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


