// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the MenuSyncFailCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuSyncFailCategory{}

// MenuSyncFailCategory struct for MenuSyncFailCategory
type MenuSyncFailCategory struct {
	// The category's ID that is on the partner system. This ID should be unique with a min length of 1 and max of 64.
	Id *string `json:"id,omitempty"`
	// An array of strings of error message.
	Errors []string `json:"errors,omitempty"`
	// An array of item JSON objects. Max 300 allowed per category. Refer to [Items](#items) for more information.
	Items []MenuSyncFailItem `json:"items,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MenuSyncFailCategory MenuSyncFailCategory

// NewMenuSyncFailCategory instantiates a new MenuSyncFailCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuSyncFailCategory() *MenuSyncFailCategory {
	this := MenuSyncFailCategory{}
	return &this
}

// NewMenuSyncFailCategoryWithDefaults instantiates a new MenuSyncFailCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuSyncFailCategoryWithDefaults() *MenuSyncFailCategory {
	this := MenuSyncFailCategory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MenuSyncFailCategory) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFailCategory) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MenuSyncFailCategory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MenuSyncFailCategory) SetId(v string) {
	o.Id = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *MenuSyncFailCategory) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFailCategory) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *MenuSyncFailCategory) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *MenuSyncFailCategory) SetErrors(v []string) {
	o.Errors = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *MenuSyncFailCategory) GetItems() []MenuSyncFailItem {
	if o == nil || IsNil(o.Items) {
		var ret []MenuSyncFailItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuSyncFailCategory) GetItemsOk() ([]MenuSyncFailItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *MenuSyncFailCategory) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []MenuSyncFailItem and assigns it to the Items field.
func (o *MenuSyncFailCategory) SetItems(v []MenuSyncFailItem) {
	o.Items = v
}

func (o MenuSyncFailCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuSyncFailCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuSyncFailCategory) UnmarshalJSON(data []byte) (err error) {
	varMenuSyncFailCategory := _MenuSyncFailCategory{}

	err = json.Unmarshal(data, &varMenuSyncFailCategory)

	if err != nil {
		return err
	}

	*o = MenuSyncFailCategory(varMenuSyncFailCategory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuSyncFailCategory struct {
	value *MenuSyncFailCategory
	isSet bool
}

func (v NullableMenuSyncFailCategory) Get() *MenuSyncFailCategory {
	return v.value
}

func (v *NullableMenuSyncFailCategory) Set(val *MenuSyncFailCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuSyncFailCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuSyncFailCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuSyncFailCategory(val *MenuSyncFailCategory) *NullableMenuSyncFailCategory {
	return &NullableMenuSyncFailCategory{value: val, isSet: true}
}

func (v NullableMenuSyncFailCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuSyncFailCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


