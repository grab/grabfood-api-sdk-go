// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the StoreStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreStatusResponse{}

// StoreStatusResponse Object contains store status info
type StoreStatusResponse struct {
	// The code of store close reason. Blank indicates store is currently open.
	CloseReason string `json:"closeReason"`
	// Indicate whether the store is in special opening hour range.
	IsInSpecialOpeningHourRange bool `json:"isInSpecialOpeningHourRange"`
	// Indicate whether the store is open.
	IsOpen bool `json:"isOpen"`
	AdditionalProperties map[string]interface{}
}

type _StoreStatusResponse StoreStatusResponse

// NewStoreStatusResponse instantiates a new StoreStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreStatusResponse(closeReason string, isInSpecialOpeningHourRange bool, isOpen bool) *StoreStatusResponse {
	this := StoreStatusResponse{}
	this.CloseReason = closeReason
	this.IsInSpecialOpeningHourRange = isInSpecialOpeningHourRange
	this.IsOpen = isOpen
	return &this
}

// NewStoreStatusResponseWithDefaults instantiates a new StoreStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreStatusResponseWithDefaults() *StoreStatusResponse {
	this := StoreStatusResponse{}
	return &this
}

// GetCloseReason returns the CloseReason field value
func (o *StoreStatusResponse) GetCloseReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloseReason
}

// GetCloseReasonOk returns a tuple with the CloseReason field value
// and a boolean to check if the value has been set.
func (o *StoreStatusResponse) GetCloseReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloseReason, true
}

// SetCloseReason sets field value
func (o *StoreStatusResponse) SetCloseReason(v string) {
	o.CloseReason = v
}

// GetIsInSpecialOpeningHourRange returns the IsInSpecialOpeningHourRange field value
func (o *StoreStatusResponse) GetIsInSpecialOpeningHourRange() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsInSpecialOpeningHourRange
}

// GetIsInSpecialOpeningHourRangeOk returns a tuple with the IsInSpecialOpeningHourRange field value
// and a boolean to check if the value has been set.
func (o *StoreStatusResponse) GetIsInSpecialOpeningHourRangeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsInSpecialOpeningHourRange, true
}

// SetIsInSpecialOpeningHourRange sets field value
func (o *StoreStatusResponse) SetIsInSpecialOpeningHourRange(v bool) {
	o.IsInSpecialOpeningHourRange = v
}

// GetIsOpen returns the IsOpen field value
func (o *StoreStatusResponse) GetIsOpen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOpen
}

// GetIsOpenOk returns a tuple with the IsOpen field value
// and a boolean to check if the value has been set.
func (o *StoreStatusResponse) GetIsOpenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOpen, true
}

// SetIsOpen sets field value
func (o *StoreStatusResponse) SetIsOpen(v bool) {
	o.IsOpen = v
}

func (o StoreStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["closeReason"] = o.CloseReason
	toSerialize["isInSpecialOpeningHourRange"] = o.IsInSpecialOpeningHourRange
	toSerialize["isOpen"] = o.IsOpen

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoreStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"closeReason",
		"isInSpecialOpeningHourRange",
		"isOpen",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreStatusResponse := _StoreStatusResponse{}

	err = json.Unmarshal(data, &varStoreStatusResponse)

	if err != nil {
		return err
	}

	*o = StoreStatusResponse(varStoreStatusResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "closeReason")
		delete(additionalProperties, "isInSpecialOpeningHourRange")
		delete(additionalProperties, "isOpen")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreStatusResponse struct {
	value *StoreStatusResponse
	isSet bool
}

func (v NullableStoreStatusResponse) Get() *StoreStatusResponse {
	return v.value
}

func (v *NullableStoreStatusResponse) Set(val *StoreStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreStatusResponse(val *StoreStatusResponse) *NullableStoreStatusResponse {
	return &NullableStoreStatusResponse{value: val, isSet: true}
}

func (v NullableStoreStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


