// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
)

// checks if the MenuEntityError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuEntityError{}

// MenuEntityError struct for MenuEntityError
type MenuEntityError struct {
	// The itemID.
	EntityID *string `json:"entityID,omitempty"`
	// The error message.
	ErrMsg *string `json:"errMsg,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MenuEntityError MenuEntityError

// NewMenuEntityError instantiates a new MenuEntityError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuEntityError() *MenuEntityError {
	this := MenuEntityError{}
	return &this
}

// NewMenuEntityErrorWithDefaults instantiates a new MenuEntityError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuEntityErrorWithDefaults() *MenuEntityError {
	this := MenuEntityError{}
	return &this
}

// GetEntityID returns the EntityID field value if set, zero value otherwise.
func (o *MenuEntityError) GetEntityID() string {
	if o == nil || IsNil(o.EntityID) {
		var ret string
		return ret
	}
	return *o.EntityID
}

// GetEntityIDOk returns a tuple with the EntityID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntityError) GetEntityIDOk() (*string, bool) {
	if o == nil || IsNil(o.EntityID) {
		return nil, false
	}
	return o.EntityID, true
}

// HasEntityID returns a boolean if a field has been set.
func (o *MenuEntityError) HasEntityID() bool {
	if o != nil && !IsNil(o.EntityID) {
		return true
	}

	return false
}

// SetEntityID gets a reference to the given string and assigns it to the EntityID field.
func (o *MenuEntityError) SetEntityID(v string) {
	o.EntityID = &v
}

// GetErrMsg returns the ErrMsg field value if set, zero value otherwise.
func (o *MenuEntityError) GetErrMsg() string {
	if o == nil || IsNil(o.ErrMsg) {
		var ret string
		return ret
	}
	return *o.ErrMsg
}

// GetErrMsgOk returns a tuple with the ErrMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntityError) GetErrMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ErrMsg) {
		return nil, false
	}
	return o.ErrMsg, true
}

// HasErrMsg returns a boolean if a field has been set.
func (o *MenuEntityError) HasErrMsg() bool {
	if o != nil && !IsNil(o.ErrMsg) {
		return true
	}

	return false
}

// SetErrMsg gets a reference to the given string and assigns it to the ErrMsg field.
func (o *MenuEntityError) SetErrMsg(v string) {
	o.ErrMsg = &v
}

func (o MenuEntityError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuEntityError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityID) {
		toSerialize["entityID"] = o.EntityID
	}
	if !IsNil(o.ErrMsg) {
		toSerialize["errMsg"] = o.ErrMsg
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MenuEntityError) UnmarshalJSON(data []byte) (err error) {
	varMenuEntityError := _MenuEntityError{}

	err = json.Unmarshal(data, &varMenuEntityError)

	if err != nil {
		return err
	}

	*o = MenuEntityError(varMenuEntityError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityID")
		delete(additionalProperties, "errMsg")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMenuEntityError struct {
	value *MenuEntityError
	isSet bool
}

func (v NullableMenuEntityError) Get() *MenuEntityError {
	return v.value
}

func (v *NullableMenuEntityError) Set(val *MenuEntityError) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuEntityError) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuEntityError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuEntityError(val *MenuEntityError) *NullableMenuEntityError {
	return &NullableMenuEntityError{value: val, isSet: true}
}

func (v NullableMenuEntityError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuEntityError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


