// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderStateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderStateRequest{}

// OrderStateRequest This request pushes the state of an order on GrabFood. 
type OrderStateRequest struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID string `json:"merchantID"`
	// The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
	OrderID string `json:"orderID"`
	// The current order state. For takeaway orders, only `DELIVERED` and `CANCELLED` states are pushed.
	State string `json:"state"`
	// The driver's estimated of arrival (ETA) in seconds when the state is `DRIVER_ALLOCATED`.
	DriverETA NullableInt32 `json:"driverETA,omitempty"`
	// The current order's sub-state. This is in free text so you should only use for reference. Grab may use this for troubleshooting. If you want some analysis, kindly use `state` instead.
	Code *string `json:"code,omitempty"`
	// Additional information to explain the current order state. May be system status or human entered message.
	Message *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderStateRequest OrderStateRequest

// NewOrderStateRequest instantiates a new OrderStateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderStateRequest(merchantID string, orderID string, state string) *OrderStateRequest {
	this := OrderStateRequest{}
	this.MerchantID = merchantID
	this.OrderID = orderID
	this.State = state
	return &this
}

// NewOrderStateRequestWithDefaults instantiates a new OrderStateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderStateRequestWithDefaults() *OrderStateRequest {
	this := OrderStateRequest{}
	return &this
}

// GetMerchantID returns the MerchantID field value
func (o *OrderStateRequest) GetMerchantID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value
// and a boolean to check if the value has been set.
func (o *OrderStateRequest) GetMerchantIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantID, true
}

// SetMerchantID sets field value
func (o *OrderStateRequest) SetMerchantID(v string) {
	o.MerchantID = v
}

// GetOrderID returns the OrderID field value
func (o *OrderStateRequest) GetOrderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderID
}

// GetOrderIDOk returns a tuple with the OrderID field value
// and a boolean to check if the value has been set.
func (o *OrderStateRequest) GetOrderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderID, true
}

// SetOrderID sets field value
func (o *OrderStateRequest) SetOrderID(v string) {
	o.OrderID = v
}

// GetState returns the State field value
func (o *OrderStateRequest) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *OrderStateRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *OrderStateRequest) SetState(v string) {
	o.State = v
}

// GetDriverETA returns the DriverETA field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderStateRequest) GetDriverETA() int32 {
	if o == nil || IsNil(o.DriverETA.Get()) {
		var ret int32
		return ret
	}
	return *o.DriverETA.Get()
}

// GetDriverETAOk returns a tuple with the DriverETA field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderStateRequest) GetDriverETAOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DriverETA.Get(), o.DriverETA.IsSet()
}

// HasDriverETA returns a boolean if a field has been set.
func (o *OrderStateRequest) HasDriverETA() bool {
	if o != nil && o.DriverETA.IsSet() {
		return true
	}

	return false
}

// SetDriverETA gets a reference to the given NullableInt32 and assigns it to the DriverETA field.
func (o *OrderStateRequest) SetDriverETA(v int32) {
	o.DriverETA.Set(&v)
}
// SetDriverETANil sets the value for DriverETA to be an explicit nil
func (o *OrderStateRequest) SetDriverETANil() {
	o.DriverETA.Set(nil)
}

// UnsetDriverETA ensures that no value is present for DriverETA, not even an explicit nil
func (o *OrderStateRequest) UnsetDriverETA() {
	o.DriverETA.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *OrderStateRequest) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStateRequest) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *OrderStateRequest) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *OrderStateRequest) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *OrderStateRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStateRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *OrderStateRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *OrderStateRequest) SetMessage(v string) {
	o.Message = &v
}

func (o OrderStateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderStateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantID"] = o.MerchantID
	toSerialize["orderID"] = o.OrderID
	toSerialize["state"] = o.State
	if o.DriverETA.IsSet() {
		toSerialize["driverETA"] = o.DriverETA.Get()
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderStateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantID",
		"orderID",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderStateRequest := _OrderStateRequest{}

	err = json.Unmarshal(data, &varOrderStateRequest)

	if err != nil {
		return err
	}

	*o = OrderStateRequest(varOrderStateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "orderID")
		delete(additionalProperties, "state")
		delete(additionalProperties, "driverETA")
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderStateRequest struct {
	value *OrderStateRequest
	isSet bool
}

func (v NullableOrderStateRequest) Get() *OrderStateRequest {
	return v.value
}

func (v *NullableOrderStateRequest) Set(val *OrderStateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStateRequest(val *OrderStateRequest) *NullableOrderStateRequest {
	return &NullableOrderStateRequest{value: val, isSet: true}
}

func (v NullableOrderStateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


