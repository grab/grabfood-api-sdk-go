// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the GetMenuOldResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMenuOldResponse{}

// GetMenuOldResponse 
type GetMenuOldResponse struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID *string `json:"merchantID,omitempty"`
	// The merchant's ID that is on the partner's database.
	PartnerMerchantID *string `json:"partnerMerchantID,omitempty"`
	Currency Currency `json:"currency"`
	// An array of section JSON objects. Max 7 allowed. Refer to [Sections](#sections) for more information.
	Sections []MenuSection `json:"sections"`
	AdditionalProperties map[string]interface{}
}

type _GetMenuOldResponse GetMenuOldResponse

// NewGetMenuOldResponse instantiates a new GetMenuOldResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMenuOldResponse(currency Currency, sections []MenuSection) *GetMenuOldResponse {
	this := GetMenuOldResponse{}
	this.Currency = currency
	this.Sections = sections
	return &this
}

// NewGetMenuOldResponseWithDefaults instantiates a new GetMenuOldResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMenuOldResponseWithDefaults() *GetMenuOldResponse {
	this := GetMenuOldResponse{}
	return &this
}

// GetMerchantID returns the MerchantID field value if set, zero value otherwise.
func (o *GetMenuOldResponse) GetMerchantID() string {
	if o == nil || IsNil(o.MerchantID) {
		var ret string
		return ret
	}
	return *o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMenuOldResponse) GetMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantID) {
		return nil, false
	}
	return o.MerchantID, true
}

// HasMerchantID returns a boolean if a field has been set.
func (o *GetMenuOldResponse) HasMerchantID() bool {
	if o != nil && !IsNil(o.MerchantID) {
		return true
	}

	return false
}

// SetMerchantID gets a reference to the given string and assigns it to the MerchantID field.
func (o *GetMenuOldResponse) SetMerchantID(v string) {
	o.MerchantID = &v
}

// GetPartnerMerchantID returns the PartnerMerchantID field value if set, zero value otherwise.
func (o *GetMenuOldResponse) GetPartnerMerchantID() string {
	if o == nil || IsNil(o.PartnerMerchantID) {
		var ret string
		return ret
	}
	return *o.PartnerMerchantID
}

// GetPartnerMerchantIDOk returns a tuple with the PartnerMerchantID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMenuOldResponse) GetPartnerMerchantIDOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerMerchantID) {
		return nil, false
	}
	return o.PartnerMerchantID, true
}

// HasPartnerMerchantID returns a boolean if a field has been set.
func (o *GetMenuOldResponse) HasPartnerMerchantID() bool {
	if o != nil && !IsNil(o.PartnerMerchantID) {
		return true
	}

	return false
}

// SetPartnerMerchantID gets a reference to the given string and assigns it to the PartnerMerchantID field.
func (o *GetMenuOldResponse) SetPartnerMerchantID(v string) {
	o.PartnerMerchantID = &v
}

// GetCurrency returns the Currency field value
func (o *GetMenuOldResponse) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *GetMenuOldResponse) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *GetMenuOldResponse) SetCurrency(v Currency) {
	o.Currency = v
}

// GetSections returns the Sections field value
func (o *GetMenuOldResponse) GetSections() []MenuSection {
	if o == nil {
		var ret []MenuSection
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *GetMenuOldResponse) GetSectionsOk() ([]MenuSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *GetMenuOldResponse) SetSections(v []MenuSection) {
	o.Sections = v
}

func (o GetMenuOldResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMenuOldResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantID) {
		toSerialize["merchantID"] = o.MerchantID
	}
	if !IsNil(o.PartnerMerchantID) {
		toSerialize["partnerMerchantID"] = o.PartnerMerchantID
	}
	toSerialize["currency"] = o.Currency
	toSerialize["sections"] = o.Sections

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetMenuOldResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"sections",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMenuOldResponse := _GetMenuOldResponse{}

	err = json.Unmarshal(data, &varGetMenuOldResponse)

	if err != nil {
		return err
	}

	*o = GetMenuOldResponse(varGetMenuOldResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "partnerMerchantID")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "sections")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetMenuOldResponse struct {
	value *GetMenuOldResponse
	isSet bool
}

func (v NullableGetMenuOldResponse) Get() *GetMenuOldResponse {
	return v.value
}

func (v *NullableGetMenuOldResponse) Set(val *GetMenuOldResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMenuOldResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMenuOldResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMenuOldResponse(val *GetMenuOldResponse) *NullableGetMenuOldResponse {
	return &NullableGetMenuOldResponse{value: val, isSet: true}
}

func (v NullableGetMenuOldResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMenuOldResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


