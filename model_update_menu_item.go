// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grabfood

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateMenuItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMenuItem{}

// UpdateMenuItem Information about the GrabFood client updating their food menu. 
type UpdateMenuItem struct {
	// The merchant's ID that is in GrabFood's database.
	MerchantID string `json:"merchantID"`
	// The record type that you want to update.
	Field string `json:"field"`
	// The record's ID on the partner system. For example, the item id in case type is ITEM.
	Id string `json:"id"`
	// The record's price in minor unit format.
	Price *int64 `json:"price,omitempty"`
	// The record's availableStatus.   Note: In order to set an item as \"UNAVAILABLE\", it is required to update both the `availableStatus` and `maxStock` fields, whereby the `maxStock` value should be set to 0. 
	AvailableStatus *string `json:"availableStatus,omitempty"`
	// Available stocks under inventory for this item. Auto reduce when there is order placed for this item.  Note: It is necessary to set `maxStock` to 0 if the `availableStatus` of the item is \"UNAVAILABLE\". Item will be set to \"AVAILABLE\" if `maxStock` > 0. 
	MaxStock *int64 `json:"maxStock,omitempty"`
	// Price configuration (in minor unit) for different service, order type and channel combination. If a service type does not have a specified price, it will utilize the default price of the item. 
	AdvancedPricings []UpdateAdvancedPricing `json:"advancedPricings,omitempty"`
	// Purchasability is set to true by default for all service type, unless it is explicitly set to false. Modifier will reuse it’s item’s purchasability. 
	Purchasabilities []UpdatePurchasability `json:"purchasabilities,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateMenuItem UpdateMenuItem

// NewUpdateMenuItem instantiates a new UpdateMenuItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMenuItem(merchantID string, field string, id string) *UpdateMenuItem {
	this := UpdateMenuItem{}
	this.MerchantID = merchantID
	this.Field = field
	this.Id = id
	return &this
}

// NewUpdateMenuItemWithDefaults instantiates a new UpdateMenuItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMenuItemWithDefaults() *UpdateMenuItem {
	this := UpdateMenuItem{}
	return &this
}

// GetMerchantID returns the MerchantID field value
func (o *UpdateMenuItem) GetMerchantID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantID
}

// GetMerchantIDOk returns a tuple with the MerchantID field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetMerchantIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantID, true
}

// SetMerchantID sets field value
func (o *UpdateMenuItem) SetMerchantID(v string) {
	o.MerchantID = v
}

// GetField returns the Field field value
func (o *UpdateMenuItem) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *UpdateMenuItem) SetField(v string) {
	o.Field = v
}

// GetId returns the Id field value
func (o *UpdateMenuItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateMenuItem) SetId(v string) {
	o.Id = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UpdateMenuItem) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UpdateMenuItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *UpdateMenuItem) SetPrice(v int64) {
	o.Price = &v
}

// GetAvailableStatus returns the AvailableStatus field value if set, zero value otherwise.
func (o *UpdateMenuItem) GetAvailableStatus() string {
	if o == nil || IsNil(o.AvailableStatus) {
		var ret string
		return ret
	}
	return *o.AvailableStatus
}

// GetAvailableStatusOk returns a tuple with the AvailableStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetAvailableStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableStatus) {
		return nil, false
	}
	return o.AvailableStatus, true
}

// HasAvailableStatus returns a boolean if a field has been set.
func (o *UpdateMenuItem) HasAvailableStatus() bool {
	if o != nil && !IsNil(o.AvailableStatus) {
		return true
	}

	return false
}

// SetAvailableStatus gets a reference to the given string and assigns it to the AvailableStatus field.
func (o *UpdateMenuItem) SetAvailableStatus(v string) {
	o.AvailableStatus = &v
}

// GetMaxStock returns the MaxStock field value if set, zero value otherwise.
func (o *UpdateMenuItem) GetMaxStock() int64 {
	if o == nil || IsNil(o.MaxStock) {
		var ret int64
		return ret
	}
	return *o.MaxStock
}

// GetMaxStockOk returns a tuple with the MaxStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetMaxStockOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxStock) {
		return nil, false
	}
	return o.MaxStock, true
}

// HasMaxStock returns a boolean if a field has been set.
func (o *UpdateMenuItem) HasMaxStock() bool {
	if o != nil && !IsNil(o.MaxStock) {
		return true
	}

	return false
}

// SetMaxStock gets a reference to the given int64 and assigns it to the MaxStock field.
func (o *UpdateMenuItem) SetMaxStock(v int64) {
	o.MaxStock = &v
}

// GetAdvancedPricings returns the AdvancedPricings field value if set, zero value otherwise.
func (o *UpdateMenuItem) GetAdvancedPricings() []UpdateAdvancedPricing {
	if o == nil || IsNil(o.AdvancedPricings) {
		var ret []UpdateAdvancedPricing
		return ret
	}
	return o.AdvancedPricings
}

// GetAdvancedPricingsOk returns a tuple with the AdvancedPricings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetAdvancedPricingsOk() ([]UpdateAdvancedPricing, bool) {
	if o == nil || IsNil(o.AdvancedPricings) {
		return nil, false
	}
	return o.AdvancedPricings, true
}

// HasAdvancedPricings returns a boolean if a field has been set.
func (o *UpdateMenuItem) HasAdvancedPricings() bool {
	if o != nil && !IsNil(o.AdvancedPricings) {
		return true
	}

	return false
}

// SetAdvancedPricings gets a reference to the given []UpdateAdvancedPricing and assigns it to the AdvancedPricings field.
func (o *UpdateMenuItem) SetAdvancedPricings(v []UpdateAdvancedPricing) {
	o.AdvancedPricings = v
}

// GetPurchasabilities returns the Purchasabilities field value if set, zero value otherwise.
func (o *UpdateMenuItem) GetPurchasabilities() []UpdatePurchasability {
	if o == nil || IsNil(o.Purchasabilities) {
		var ret []UpdatePurchasability
		return ret
	}
	return o.Purchasabilities
}

// GetPurchasabilitiesOk returns a tuple with the Purchasabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMenuItem) GetPurchasabilitiesOk() ([]UpdatePurchasability, bool) {
	if o == nil || IsNil(o.Purchasabilities) {
		return nil, false
	}
	return o.Purchasabilities, true
}

// HasPurchasabilities returns a boolean if a field has been set.
func (o *UpdateMenuItem) HasPurchasabilities() bool {
	if o != nil && !IsNil(o.Purchasabilities) {
		return true
	}

	return false
}

// SetPurchasabilities gets a reference to the given []UpdatePurchasability and assigns it to the Purchasabilities field.
func (o *UpdateMenuItem) SetPurchasabilities(v []UpdatePurchasability) {
	o.Purchasabilities = v
}

func (o UpdateMenuItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMenuItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantID"] = o.MerchantID
	toSerialize["field"] = o.Field
	toSerialize["id"] = o.Id
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.AvailableStatus) {
		toSerialize["availableStatus"] = o.AvailableStatus
	}
	if !IsNil(o.MaxStock) {
		toSerialize["maxStock"] = o.MaxStock
	}
	if !IsNil(o.AdvancedPricings) {
		toSerialize["advancedPricings"] = o.AdvancedPricings
	}
	if !IsNil(o.Purchasabilities) {
		toSerialize["purchasabilities"] = o.Purchasabilities
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateMenuItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantID",
		"field",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMenuItem := _UpdateMenuItem{}

	err = json.Unmarshal(data, &varUpdateMenuItem)

	if err != nil {
		return err
	}

	*o = UpdateMenuItem(varUpdateMenuItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "merchantID")
		delete(additionalProperties, "field")
		delete(additionalProperties, "id")
		delete(additionalProperties, "price")
		delete(additionalProperties, "availableStatus")
		delete(additionalProperties, "maxStock")
		delete(additionalProperties, "advancedPricings")
		delete(additionalProperties, "purchasabilities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateMenuItem struct {
	value *UpdateMenuItem
	isSet bool
}

func (v NullableUpdateMenuItem) Get() *UpdateMenuItem {
	return v.value
}

func (v *NullableUpdateMenuItem) Set(val *UpdateMenuItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMenuItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMenuItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMenuItem(val *UpdateMenuItem) *NullableUpdateMenuItem {
	return &NullableUpdateMenuItem{value: val, isSet: true}
}

func (v NullableUpdateMenuItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMenuItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


